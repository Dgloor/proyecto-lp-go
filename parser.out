Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN
    BREAK
    CASE
    CHAN
    CONST
    CONTINUE
    DEFAULT
    DEFER
    FALLTHROUGH
    FUNC
    GO
    GOTO
    IDENTIFICADOR
    IMPORT
    INTERFACE
    NOT
    OR
    PACKAGE
    PUNTO
    RETURN
    SELECT
    STRUCT
    SWITCH
    TYPE

Grammar

Rule 0     S' -> body
Rule 1     body -> instruccion
Rule 2     instruccion -> print I_PARENTESIS valores D_PARENTESIS
Rule 3     instruccion -> VAR ID type ASIGNACION valor
Rule 4     instruccion -> VAR ID ASIGNACION valor
Rule 5     instruccion -> ID asignacion valor
Rule 6     instruccion -> ID asignacion instruccion
Rule 7     instruccion -> ID operador_matematico
Rule 8     instruccion -> IF condicion I_LLAVE body D_LLAVE
Rule 9     instruccion -> ELSE I_LLAVE body D_LLAVE
Rule 10    instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE
Rule 11    instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
Rule 12    instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
Rule 13    instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
Rule 14    instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
Rule 15    instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
Rule 16    instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
Rule 17    instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
Rule 18    instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
Rule 19    instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
Rule 20    instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
Rule 21    clave_valor -> valor DOS_PUNTOS valor
Rule 22    claves_valores -> clave_valor
Rule 23    claves_valores -> clave_valor COMA claves_valores
Rule 24    condicion -> valor
Rule 25    condicion -> I_PARENTESIS valor D_PARENTESIS
Rule 26    iteracion_for -> ID
Rule 27    valores -> valor
Rule 28    valores -> valor COMA valores
Rule 29    valor -> valor operacion_binaria valor
Rule 30    print -> PRINTLN
Rule 31    print -> PRINTF
Rule 32    print -> PRINT
Rule 33    type -> BOOL
Rule 34    type -> STRINGTYPE
Rule 35    type -> INTEGER
Rule 36    type -> FLOAT32
Rule 37    type -> FLOAT64
Rule 38    operador_matematico -> INCREMENTO
Rule 39    operador_matematico -> DECREMENTO
Rule 40    asignacion -> ASIGNACION
Rule 41    asignacion -> ASIGNACION_ADICION
Rule 42    asignacion -> ASIGNACION_RESTA
Rule 43    asignacion -> ASIGNACION_MULTI
Rule 44    asignacion -> DECLARACION_ASIGNACION
Rule 45    asignacion -> ASIGNACION_DIVISION
Rule 46    asignacion -> ASIGNACION_MODULO
Rule 47    operacion_binaria -> ADICION
Rule 48    operacion_binaria -> RESTA
Rule 49    operacion_binaria -> MULTIPLICACION
Rule 50    operacion_binaria -> DIVISION
Rule 51    operacion_binaria -> MODULO
Rule 52    operacion_binaria -> MENOR_IGUAL
Rule 53    operacion_binaria -> IGUAL
Rule 54    operacion_binaria -> DIFERENTE
Rule 55    operacion_binaria -> MAYOR
Rule 56    operacion_binaria -> MAYOR_IGUAL
Rule 57    operacion_binaria -> MENOR
Rule 58    valor -> INT
Rule 59    valor -> DOUBLE
Rule 60    valor -> STRING
Rule 61    valor -> ID

Terminals, with rules where they appear

ADICION              : 47
AND                  : 
ASIGNACION           : 3 4 40
ASIGNACION_ADICION   : 41
ASIGNACION_DIVISION  : 45
ASIGNACION_MODULO    : 46
ASIGNACION_MULTI     : 43
ASIGNACION_RESTA     : 42
BOOL                 : 33
BOOLEAN              : 
BREAK                : 
CASE                 : 
CHAN                 : 
COMA                 : 13 23 28
CONST                : 
CONTINUE             : 
DECLARACION_ASIGNACION : 11 13 44
DECREMENTO           : 39
DEFAULT              : 
DEFER                : 
DIFERENTE            : 54
DIVISION             : 50
DOS_PUNTOS           : 21
DOUBLE               : 59
D_CORCHETE           : 14 15 16 17 18 19 20
D_LLAVE              : 8 9 10 11 12 13 14 15 16 17 18 20
D_PARENTESIS         : 2 19 25
ELSE                 : 9
ELSEIF               : 10
FALLTHROUGH          : 
FLOAT32              : 36
FLOAT64              : 37
FOR                  : 11 12 13
FUNC                 : 
GO                   : 
GOTO                 : 
ID                   : 3 4 5 6 7 11 11 12 13 13 13 26 61
IDENTIFICADOR        : 
IF                   : 8
IGUAL                : 53
IMPORT               : 
INCREMENTO           : 38
INT                  : 15 17 58
INTEGER              : 35
INTERFACE            : 
I_CORCHETE           : 14 15 16 17 18 19 20
I_LLAVE              : 8 9 10 11 12 13 14 15 16 17 18 20
I_PARENTESIS         : 2 19 25
MAKE                 : 19
MAP                  : 18 19 20
MAYOR                : 55
MAYOR_IGUAL          : 56
MENOR                : 57
MENOR_IGUAL          : 52
MODULO               : 51
MULTIPLICACION       : 49
NOT                  : 
OR                   : 
PACKAGE              : 
PRINT                : 32
PRINTF               : 31
PRINTLN              : 30
PUNTO                : 
PUNTO_COMA           : 12 12
RANGE                : 11 13
RESTA                : 48
RETURN               : 
SELECT               : 
STRING               : 60
STRINGTYPE           : 34
STRUCT               : 
SWITCH               : 
TYPE                 : 
VAR                  : 3 4
error                : 

Nonterminals, with rules where they appear

asignacion           : 5 6
body                 : 8 9 10 11 12 13 0
clave_valor          : 22 23
claves_valores       : 20 23
condicion            : 8 10
instruccion          : 1 6 12
iteracion_for        : 
operacion_binaria    : 29
operador_matematico  : 7 12
print                : 2
type                 : 3 14 15 16 17 18 18 19 19 20 20
valor                : 3 4 5 12 21 21 24 25 27 28 29 29
valores              : 2 16 17 28

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 1
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 1

    (0) S' -> body .



state 2

    (1) body -> instruccion .

    $end            reduce using rule 1 (body -> instruccion .)
    D_LLAVE         reduce using rule 1 (body -> instruccion .)


state 3

    (2) instruccion -> print . I_PARENTESIS valores D_PARENTESIS

    I_PARENTESIS    shift and go to state 16


state 4

    (3) instruccion -> VAR . ID type ASIGNACION valor
    (4) instruccion -> VAR . ID ASIGNACION valor

    ID              shift and go to state 17


state 5

    (5) instruccion -> ID . asignacion valor
    (6) instruccion -> ID . asignacion instruccion
    (7) instruccion -> ID . operador_matematico
    (40) asignacion -> . ASIGNACION
    (41) asignacion -> . ASIGNACION_ADICION
    (42) asignacion -> . ASIGNACION_RESTA
    (43) asignacion -> . ASIGNACION_MULTI
    (44) asignacion -> . DECLARACION_ASIGNACION
    (45) asignacion -> . ASIGNACION_DIVISION
    (46) asignacion -> . ASIGNACION_MODULO
    (38) operador_matematico -> . INCREMENTO
    (39) operador_matematico -> . DECREMENTO

    ASIGNACION      shift and go to state 20
    ASIGNACION_ADICION shift and go to state 21
    ASIGNACION_RESTA shift and go to state 22
    ASIGNACION_MULTI shift and go to state 23
    DECLARACION_ASIGNACION shift and go to state 24
    ASIGNACION_DIVISION shift and go to state 25
    ASIGNACION_MODULO shift and go to state 26
    INCREMENTO      shift and go to state 27
    DECREMENTO      shift and go to state 28

    asignacion                     shift and go to state 18
    operador_matematico            shift and go to state 19

state 6

    (8) instruccion -> IF . condicion I_LLAVE body D_LLAVE
    (24) condicion -> . valor
    (25) condicion -> . I_PARENTESIS valor D_PARENTESIS
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    I_PARENTESIS    shift and go to state 31
    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    condicion                      shift and go to state 29
    valor                          shift and go to state 30

state 7

    (9) instruccion -> ELSE . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 36


state 8

    (10) instruccion -> ELSEIF . condicion I_LLAVE body D_LLAVE
    (24) condicion -> . valor
    (25) condicion -> . I_PARENTESIS valor D_PARENTESIS
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    I_PARENTESIS    shift and go to state 31
    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    condicion                      shift and go to state 37
    valor                          shift and go to state 30

state 9

    (11) instruccion -> FOR . ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> FOR . instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> FOR . ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    ID              shift and go to state 38
    VAR             shift and go to state 4
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    instruccion                    shift and go to state 39
    print                          shift and go to state 3

state 10

    (14) instruccion -> I_CORCHETE . D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> I_CORCHETE . INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> I_CORCHETE . D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> I_CORCHETE . INT D_CORCHETE type I_LLAVE valores D_LLAVE

    D_CORCHETE      shift and go to state 40
    INT             shift and go to state 41


state 11

    (18) instruccion -> MAP . I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (20) instruccion -> MAP . I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE

    I_CORCHETE      shift and go to state 42


state 12

    (19) instruccion -> MAKE . I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS

    I_PARENTESIS    shift and go to state 43


state 13

    (30) print -> PRINTLN .

    I_PARENTESIS    reduce using rule 30 (print -> PRINTLN .)


state 14

    (31) print -> PRINTF .

    I_PARENTESIS    reduce using rule 31 (print -> PRINTF .)


state 15

    (32) print -> PRINT .

    I_PARENTESIS    reduce using rule 32 (print -> PRINT .)


state 16

    (2) instruccion -> print I_PARENTESIS . valores D_PARENTESIS
    (27) valores -> . valor
    (28) valores -> . valor COMA valores
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valores                        shift and go to state 44
    valor                          shift and go to state 45

state 17

    (3) instruccion -> VAR ID . type ASIGNACION valor
    (4) instruccion -> VAR ID . ASIGNACION valor
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    ASIGNACION      shift and go to state 47
    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 46

state 18

    (5) instruccion -> ID asignacion . valor
    (6) instruccion -> ID asignacion . instruccion
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 53
    VAR             shift and go to state 4
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    valor                          shift and go to state 54
    instruccion                    shift and go to state 55
    print                          shift and go to state 3

state 19

    (7) instruccion -> ID operador_matematico .

    $end            reduce using rule 7 (instruccion -> ID operador_matematico .)
    PUNTO_COMA      reduce using rule 7 (instruccion -> ID operador_matematico .)
    D_LLAVE         reduce using rule 7 (instruccion -> ID operador_matematico .)


state 20

    (40) asignacion -> ASIGNACION .

    INT             reduce using rule 40 (asignacion -> ASIGNACION .)
    DOUBLE          reduce using rule 40 (asignacion -> ASIGNACION .)
    STRING          reduce using rule 40 (asignacion -> ASIGNACION .)
    ID              reduce using rule 40 (asignacion -> ASIGNACION .)
    VAR             reduce using rule 40 (asignacion -> ASIGNACION .)
    IF              reduce using rule 40 (asignacion -> ASIGNACION .)
    ELSE            reduce using rule 40 (asignacion -> ASIGNACION .)
    ELSEIF          reduce using rule 40 (asignacion -> ASIGNACION .)
    FOR             reduce using rule 40 (asignacion -> ASIGNACION .)
    I_CORCHETE      reduce using rule 40 (asignacion -> ASIGNACION .)
    MAP             reduce using rule 40 (asignacion -> ASIGNACION .)
    MAKE            reduce using rule 40 (asignacion -> ASIGNACION .)
    PRINTLN         reduce using rule 40 (asignacion -> ASIGNACION .)
    PRINTF          reduce using rule 40 (asignacion -> ASIGNACION .)
    PRINT           reduce using rule 40 (asignacion -> ASIGNACION .)


state 21

    (41) asignacion -> ASIGNACION_ADICION .

    INT             reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    DOUBLE          reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    STRING          reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    ID              reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    VAR             reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    IF              reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    ELSE            reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    ELSEIF          reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    FOR             reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    I_CORCHETE      reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    MAP             reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    MAKE            reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    PRINTLN         reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    PRINTF          reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)
    PRINT           reduce using rule 41 (asignacion -> ASIGNACION_ADICION .)


state 22

    (42) asignacion -> ASIGNACION_RESTA .

    INT             reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    DOUBLE          reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    STRING          reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    ID              reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    VAR             reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    IF              reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    ELSE            reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    ELSEIF          reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    FOR             reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    I_CORCHETE      reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    MAP             reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    MAKE            reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    PRINTLN         reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    PRINTF          reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)
    PRINT           reduce using rule 42 (asignacion -> ASIGNACION_RESTA .)


state 23

    (43) asignacion -> ASIGNACION_MULTI .

    INT             reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    DOUBLE          reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    STRING          reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    ID              reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    VAR             reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    IF              reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    ELSE            reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    ELSEIF          reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    FOR             reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    I_CORCHETE      reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    MAP             reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    MAKE            reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    PRINTLN         reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    PRINTF          reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)
    PRINT           reduce using rule 43 (asignacion -> ASIGNACION_MULTI .)


state 24

    (44) asignacion -> DECLARACION_ASIGNACION .

    INT             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    DOUBLE          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    STRING          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ID              reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    VAR             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    IF              reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ELSE            reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ELSEIF          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    FOR             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    I_CORCHETE      reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    MAP             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    MAKE            reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTLN         reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTF          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINT           reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)


state 25

    (45) asignacion -> ASIGNACION_DIVISION .

    INT             reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    DOUBLE          reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    STRING          reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    ID              reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    VAR             reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    IF              reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    ELSE            reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    ELSEIF          reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    FOR             reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    I_CORCHETE      reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    MAP             reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    MAKE            reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    PRINTLN         reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    PRINTF          reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)
    PRINT           reduce using rule 45 (asignacion -> ASIGNACION_DIVISION .)


state 26

    (46) asignacion -> ASIGNACION_MODULO .

    INT             reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    DOUBLE          reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    STRING          reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    ID              reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    VAR             reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    IF              reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    ELSE            reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    ELSEIF          reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    FOR             reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    I_CORCHETE      reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    MAP             reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    MAKE            reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    PRINTLN         reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    PRINTF          reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)
    PRINT           reduce using rule 46 (asignacion -> ASIGNACION_MODULO .)


state 27

    (38) operador_matematico -> INCREMENTO .

    $end            reduce using rule 38 (operador_matematico -> INCREMENTO .)
    D_LLAVE         reduce using rule 38 (operador_matematico -> INCREMENTO .)
    PUNTO_COMA      reduce using rule 38 (operador_matematico -> INCREMENTO .)
    I_LLAVE         reduce using rule 38 (operador_matematico -> INCREMENTO .)


state 28

    (39) operador_matematico -> DECREMENTO .

    $end            reduce using rule 39 (operador_matematico -> DECREMENTO .)
    D_LLAVE         reduce using rule 39 (operador_matematico -> DECREMENTO .)
    PUNTO_COMA      reduce using rule 39 (operador_matematico -> DECREMENTO .)
    I_LLAVE         reduce using rule 39 (operador_matematico -> DECREMENTO .)


state 29

    (8) instruccion -> IF condicion . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 56


state 30

    (24) condicion -> valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    I_LLAVE         reduce using rule 24 (condicion -> valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 31

    (25) condicion -> I_PARENTESIS . valor D_PARENTESIS
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 69

state 32

    (58) valor -> INT .

    ADICION         reduce using rule 58 (valor -> INT .)
    RESTA           reduce using rule 58 (valor -> INT .)
    MULTIPLICACION  reduce using rule 58 (valor -> INT .)
    DIVISION        reduce using rule 58 (valor -> INT .)
    MODULO          reduce using rule 58 (valor -> INT .)
    MENOR_IGUAL     reduce using rule 58 (valor -> INT .)
    IGUAL           reduce using rule 58 (valor -> INT .)
    DIFERENTE       reduce using rule 58 (valor -> INT .)
    MAYOR           reduce using rule 58 (valor -> INT .)
    MAYOR_IGUAL     reduce using rule 58 (valor -> INT .)
    MENOR           reduce using rule 58 (valor -> INT .)
    I_LLAVE         reduce using rule 58 (valor -> INT .)
    COMA            reduce using rule 58 (valor -> INT .)
    D_PARENTESIS    reduce using rule 58 (valor -> INT .)
    $end            reduce using rule 58 (valor -> INT .)
    PUNTO_COMA      reduce using rule 58 (valor -> INT .)
    D_LLAVE         reduce using rule 58 (valor -> INT .)
    DOS_PUNTOS      reduce using rule 58 (valor -> INT .)


state 33

    (59) valor -> DOUBLE .

    ADICION         reduce using rule 59 (valor -> DOUBLE .)
    RESTA           reduce using rule 59 (valor -> DOUBLE .)
    MULTIPLICACION  reduce using rule 59 (valor -> DOUBLE .)
    DIVISION        reduce using rule 59 (valor -> DOUBLE .)
    MODULO          reduce using rule 59 (valor -> DOUBLE .)
    MENOR_IGUAL     reduce using rule 59 (valor -> DOUBLE .)
    IGUAL           reduce using rule 59 (valor -> DOUBLE .)
    DIFERENTE       reduce using rule 59 (valor -> DOUBLE .)
    MAYOR           reduce using rule 59 (valor -> DOUBLE .)
    MAYOR_IGUAL     reduce using rule 59 (valor -> DOUBLE .)
    MENOR           reduce using rule 59 (valor -> DOUBLE .)
    I_LLAVE         reduce using rule 59 (valor -> DOUBLE .)
    COMA            reduce using rule 59 (valor -> DOUBLE .)
    D_PARENTESIS    reduce using rule 59 (valor -> DOUBLE .)
    $end            reduce using rule 59 (valor -> DOUBLE .)
    PUNTO_COMA      reduce using rule 59 (valor -> DOUBLE .)
    D_LLAVE         reduce using rule 59 (valor -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 59 (valor -> DOUBLE .)


state 34

    (60) valor -> STRING .

    ADICION         reduce using rule 60 (valor -> STRING .)
    RESTA           reduce using rule 60 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 60 (valor -> STRING .)
    DIVISION        reduce using rule 60 (valor -> STRING .)
    MODULO          reduce using rule 60 (valor -> STRING .)
    MENOR_IGUAL     reduce using rule 60 (valor -> STRING .)
    IGUAL           reduce using rule 60 (valor -> STRING .)
    DIFERENTE       reduce using rule 60 (valor -> STRING .)
    MAYOR           reduce using rule 60 (valor -> STRING .)
    MAYOR_IGUAL     reduce using rule 60 (valor -> STRING .)
    MENOR           reduce using rule 60 (valor -> STRING .)
    I_LLAVE         reduce using rule 60 (valor -> STRING .)
    COMA            reduce using rule 60 (valor -> STRING .)
    D_PARENTESIS    reduce using rule 60 (valor -> STRING .)
    $end            reduce using rule 60 (valor -> STRING .)
    PUNTO_COMA      reduce using rule 60 (valor -> STRING .)
    D_LLAVE         reduce using rule 60 (valor -> STRING .)
    DOS_PUNTOS      reduce using rule 60 (valor -> STRING .)


state 35

    (61) valor -> ID .

    ADICION         reduce using rule 61 (valor -> ID .)
    RESTA           reduce using rule 61 (valor -> ID .)
    MULTIPLICACION  reduce using rule 61 (valor -> ID .)
    DIVISION        reduce using rule 61 (valor -> ID .)
    MODULO          reduce using rule 61 (valor -> ID .)
    MENOR_IGUAL     reduce using rule 61 (valor -> ID .)
    IGUAL           reduce using rule 61 (valor -> ID .)
    DIFERENTE       reduce using rule 61 (valor -> ID .)
    MAYOR           reduce using rule 61 (valor -> ID .)
    MAYOR_IGUAL     reduce using rule 61 (valor -> ID .)
    MENOR           reduce using rule 61 (valor -> ID .)
    I_LLAVE         reduce using rule 61 (valor -> ID .)
    COMA            reduce using rule 61 (valor -> ID .)
    D_PARENTESIS    reduce using rule 61 (valor -> ID .)
    $end            reduce using rule 61 (valor -> ID .)
    PUNTO_COMA      reduce using rule 61 (valor -> ID .)
    D_LLAVE         reduce using rule 61 (valor -> ID .)
    DOS_PUNTOS      reduce using rule 61 (valor -> ID .)


state 36

    (9) instruccion -> ELSE I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 70
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 37

    (10) instruccion -> ELSEIF condicion . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 71


state 38

    (11) instruccion -> FOR ID . DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (13) instruccion -> FOR ID . COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (5) instruccion -> ID . asignacion valor
    (6) instruccion -> ID . asignacion instruccion
    (7) instruccion -> ID . operador_matematico
    (40) asignacion -> . ASIGNACION
    (41) asignacion -> . ASIGNACION_ADICION
    (42) asignacion -> . ASIGNACION_RESTA
    (43) asignacion -> . ASIGNACION_MULTI
    (44) asignacion -> . DECLARACION_ASIGNACION
    (45) asignacion -> . ASIGNACION_DIVISION
    (46) asignacion -> . ASIGNACION_MODULO
    (38) operador_matematico -> . INCREMENTO
    (39) operador_matematico -> . DECREMENTO

    DECLARACION_ASIGNACION shift and go to state 72
    COMA            shift and go to state 73
    ASIGNACION      shift and go to state 20
    ASIGNACION_ADICION shift and go to state 21
    ASIGNACION_RESTA shift and go to state 22
    ASIGNACION_MULTI shift and go to state 23
    ASIGNACION_DIVISION shift and go to state 25
    ASIGNACION_MODULO shift and go to state 26
    INCREMENTO      shift and go to state 27
    DECREMENTO      shift and go to state 28

    asignacion                     shift and go to state 18
    operador_matematico            shift and go to state 19

state 39

    (12) instruccion -> FOR instruccion . PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE

    PUNTO_COMA      shift and go to state 74


state 40

    (14) instruccion -> I_CORCHETE D_CORCHETE . type I_LLAVE D_LLAVE
    (16) instruccion -> I_CORCHETE D_CORCHETE . type I_LLAVE valores D_LLAVE
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 75

state 41

    (15) instruccion -> I_CORCHETE INT . D_CORCHETE type I_LLAVE D_LLAVE
    (17) instruccion -> I_CORCHETE INT . D_CORCHETE type I_LLAVE valores D_LLAVE

    D_CORCHETE      shift and go to state 76


state 42

    (18) instruccion -> MAP I_CORCHETE . type D_CORCHETE type I_LLAVE D_LLAVE
    (20) instruccion -> MAP I_CORCHETE . type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 77

state 43

    (19) instruccion -> MAKE I_PARENTESIS . MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS

    MAP             shift and go to state 78


state 44

    (2) instruccion -> print I_PARENTESIS valores . D_PARENTESIS

    D_PARENTESIS    shift and go to state 79


state 45

    (27) valores -> valor .
    (28) valores -> valor . COMA valores
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    D_PARENTESIS    reduce using rule 27 (valores -> valor .)
    D_LLAVE         reduce using rule 27 (valores -> valor .)
    COMA            shift and go to state 80
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 46

    (3) instruccion -> VAR ID type . ASIGNACION valor

    ASIGNACION      shift and go to state 81


state 47

    (4) instruccion -> VAR ID ASIGNACION . valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 82

state 48

    (33) type -> BOOL .

    ASIGNACION      reduce using rule 33 (type -> BOOL .)
    I_LLAVE         reduce using rule 33 (type -> BOOL .)
    D_CORCHETE      reduce using rule 33 (type -> BOOL .)
    D_PARENTESIS    reduce using rule 33 (type -> BOOL .)


state 49

    (34) type -> STRINGTYPE .

    ASIGNACION      reduce using rule 34 (type -> STRINGTYPE .)
    I_LLAVE         reduce using rule 34 (type -> STRINGTYPE .)
    D_CORCHETE      reduce using rule 34 (type -> STRINGTYPE .)
    D_PARENTESIS    reduce using rule 34 (type -> STRINGTYPE .)


state 50

    (35) type -> INTEGER .

    ASIGNACION      reduce using rule 35 (type -> INTEGER .)
    I_LLAVE         reduce using rule 35 (type -> INTEGER .)
    D_CORCHETE      reduce using rule 35 (type -> INTEGER .)
    D_PARENTESIS    reduce using rule 35 (type -> INTEGER .)


state 51

    (36) type -> FLOAT32 .

    ASIGNACION      reduce using rule 36 (type -> FLOAT32 .)
    I_LLAVE         reduce using rule 36 (type -> FLOAT32 .)
    D_CORCHETE      reduce using rule 36 (type -> FLOAT32 .)
    D_PARENTESIS    reduce using rule 36 (type -> FLOAT32 .)


state 52

    (37) type -> FLOAT64 .

    ASIGNACION      reduce using rule 37 (type -> FLOAT64 .)
    I_LLAVE         reduce using rule 37 (type -> FLOAT64 .)
    D_CORCHETE      reduce using rule 37 (type -> FLOAT64 .)
    D_PARENTESIS    reduce using rule 37 (type -> FLOAT64 .)


state 53

    (61) valor -> ID .
    (5) instruccion -> ID . asignacion valor
    (6) instruccion -> ID . asignacion instruccion
    (7) instruccion -> ID . operador_matematico
    (40) asignacion -> . ASIGNACION
    (41) asignacion -> . ASIGNACION_ADICION
    (42) asignacion -> . ASIGNACION_RESTA
    (43) asignacion -> . ASIGNACION_MULTI
    (44) asignacion -> . DECLARACION_ASIGNACION
    (45) asignacion -> . ASIGNACION_DIVISION
    (46) asignacion -> . ASIGNACION_MODULO
    (38) operador_matematico -> . INCREMENTO
    (39) operador_matematico -> . DECREMENTO

    ADICION         reduce using rule 61 (valor -> ID .)
    RESTA           reduce using rule 61 (valor -> ID .)
    MULTIPLICACION  reduce using rule 61 (valor -> ID .)
    DIVISION        reduce using rule 61 (valor -> ID .)
    MODULO          reduce using rule 61 (valor -> ID .)
    MENOR_IGUAL     reduce using rule 61 (valor -> ID .)
    IGUAL           reduce using rule 61 (valor -> ID .)
    DIFERENTE       reduce using rule 61 (valor -> ID .)
    MAYOR           reduce using rule 61 (valor -> ID .)
    MAYOR_IGUAL     reduce using rule 61 (valor -> ID .)
    MENOR           reduce using rule 61 (valor -> ID .)
    $end            reduce using rule 61 (valor -> ID .)
    PUNTO_COMA      reduce using rule 61 (valor -> ID .)
    D_LLAVE         reduce using rule 61 (valor -> ID .)
    ASIGNACION      shift and go to state 20
    ASIGNACION_ADICION shift and go to state 21
    ASIGNACION_RESTA shift and go to state 22
    ASIGNACION_MULTI shift and go to state 23
    DECLARACION_ASIGNACION shift and go to state 24
    ASIGNACION_DIVISION shift and go to state 25
    ASIGNACION_MODULO shift and go to state 26
    INCREMENTO      shift and go to state 27
    DECREMENTO      shift and go to state 28

    asignacion                     shift and go to state 18
    operador_matematico            shift and go to state 19

state 54

    (5) instruccion -> ID asignacion valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    $end            reduce using rule 5 (instruccion -> ID asignacion valor .)
    PUNTO_COMA      reduce using rule 5 (instruccion -> ID asignacion valor .)
    D_LLAVE         reduce using rule 5 (instruccion -> ID asignacion valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 55

    (6) instruccion -> ID asignacion instruccion .

    $end            reduce using rule 6 (instruccion -> ID asignacion instruccion .)
    PUNTO_COMA      reduce using rule 6 (instruccion -> ID asignacion instruccion .)
    D_LLAVE         reduce using rule 6 (instruccion -> ID asignacion instruccion .)


state 56

    (8) instruccion -> IF condicion I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 83
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 57

    (29) valor -> valor operacion_binaria . valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 84

state 58

    (47) operacion_binaria -> ADICION .

    INT             reduce using rule 47 (operacion_binaria -> ADICION .)
    DOUBLE          reduce using rule 47 (operacion_binaria -> ADICION .)
    STRING          reduce using rule 47 (operacion_binaria -> ADICION .)
    ID              reduce using rule 47 (operacion_binaria -> ADICION .)


state 59

    (48) operacion_binaria -> RESTA .

    INT             reduce using rule 48 (operacion_binaria -> RESTA .)
    DOUBLE          reduce using rule 48 (operacion_binaria -> RESTA .)
    STRING          reduce using rule 48 (operacion_binaria -> RESTA .)
    ID              reduce using rule 48 (operacion_binaria -> RESTA .)


state 60

    (49) operacion_binaria -> MULTIPLICACION .

    INT             reduce using rule 49 (operacion_binaria -> MULTIPLICACION .)
    DOUBLE          reduce using rule 49 (operacion_binaria -> MULTIPLICACION .)
    STRING          reduce using rule 49 (operacion_binaria -> MULTIPLICACION .)
    ID              reduce using rule 49 (operacion_binaria -> MULTIPLICACION .)


state 61

    (50) operacion_binaria -> DIVISION .

    INT             reduce using rule 50 (operacion_binaria -> DIVISION .)
    DOUBLE          reduce using rule 50 (operacion_binaria -> DIVISION .)
    STRING          reduce using rule 50 (operacion_binaria -> DIVISION .)
    ID              reduce using rule 50 (operacion_binaria -> DIVISION .)


state 62

    (51) operacion_binaria -> MODULO .

    INT             reduce using rule 51 (operacion_binaria -> MODULO .)
    DOUBLE          reduce using rule 51 (operacion_binaria -> MODULO .)
    STRING          reduce using rule 51 (operacion_binaria -> MODULO .)
    ID              reduce using rule 51 (operacion_binaria -> MODULO .)


state 63

    (52) operacion_binaria -> MENOR_IGUAL .

    INT             reduce using rule 52 (operacion_binaria -> MENOR_IGUAL .)
    DOUBLE          reduce using rule 52 (operacion_binaria -> MENOR_IGUAL .)
    STRING          reduce using rule 52 (operacion_binaria -> MENOR_IGUAL .)
    ID              reduce using rule 52 (operacion_binaria -> MENOR_IGUAL .)


state 64

    (53) operacion_binaria -> IGUAL .

    INT             reduce using rule 53 (operacion_binaria -> IGUAL .)
    DOUBLE          reduce using rule 53 (operacion_binaria -> IGUAL .)
    STRING          reduce using rule 53 (operacion_binaria -> IGUAL .)
    ID              reduce using rule 53 (operacion_binaria -> IGUAL .)


state 65

    (54) operacion_binaria -> DIFERENTE .

    INT             reduce using rule 54 (operacion_binaria -> DIFERENTE .)
    DOUBLE          reduce using rule 54 (operacion_binaria -> DIFERENTE .)
    STRING          reduce using rule 54 (operacion_binaria -> DIFERENTE .)
    ID              reduce using rule 54 (operacion_binaria -> DIFERENTE .)


state 66

    (55) operacion_binaria -> MAYOR .

    INT             reduce using rule 55 (operacion_binaria -> MAYOR .)
    DOUBLE          reduce using rule 55 (operacion_binaria -> MAYOR .)
    STRING          reduce using rule 55 (operacion_binaria -> MAYOR .)
    ID              reduce using rule 55 (operacion_binaria -> MAYOR .)


state 67

    (56) operacion_binaria -> MAYOR_IGUAL .

    INT             reduce using rule 56 (operacion_binaria -> MAYOR_IGUAL .)
    DOUBLE          reduce using rule 56 (operacion_binaria -> MAYOR_IGUAL .)
    STRING          reduce using rule 56 (operacion_binaria -> MAYOR_IGUAL .)
    ID              reduce using rule 56 (operacion_binaria -> MAYOR_IGUAL .)


state 68

    (57) operacion_binaria -> MENOR .

    INT             reduce using rule 57 (operacion_binaria -> MENOR .)
    DOUBLE          reduce using rule 57 (operacion_binaria -> MENOR .)
    STRING          reduce using rule 57 (operacion_binaria -> MENOR .)
    ID              reduce using rule 57 (operacion_binaria -> MENOR .)


state 69

    (25) condicion -> I_PARENTESIS valor . D_PARENTESIS
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    D_PARENTESIS    shift and go to state 85
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 70

    (9) instruccion -> ELSE I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 86


state 71

    (10) instruccion -> ELSEIF condicion I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 87
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 72

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION . RANGE ID I_LLAVE body D_LLAVE
    (44) asignacion -> DECLARACION_ASIGNACION .

    RANGE           shift and go to state 88
    INT             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    DOUBLE          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    STRING          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ID              reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    VAR             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    IF              reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ELSE            reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    ELSEIF          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    FOR             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    I_CORCHETE      reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    MAP             reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    MAKE            reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTLN         reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTF          reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)
    PRINT           reduce using rule 44 (asignacion -> DECLARACION_ASIGNACION .)


state 73

    (13) instruccion -> FOR ID COMA . ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE

    ID              shift and go to state 89


state 74

    (12) instruccion -> FOR instruccion PUNTO_COMA . valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 90

state 75

    (14) instruccion -> I_CORCHETE D_CORCHETE type . I_LLAVE D_LLAVE
    (16) instruccion -> I_CORCHETE D_CORCHETE type . I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 91


state 76

    (15) instruccion -> I_CORCHETE INT D_CORCHETE . type I_LLAVE D_LLAVE
    (17) instruccion -> I_CORCHETE INT D_CORCHETE . type I_LLAVE valores D_LLAVE
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 92

state 77

    (18) instruccion -> MAP I_CORCHETE type . D_CORCHETE type I_LLAVE D_LLAVE
    (20) instruccion -> MAP I_CORCHETE type . D_CORCHETE type I_LLAVE claves_valores D_LLAVE

    D_CORCHETE      shift and go to state 93


state 78

    (19) instruccion -> MAKE I_PARENTESIS MAP . I_CORCHETE type D_CORCHETE type D_PARENTESIS

    I_CORCHETE      shift and go to state 94


state 79

    (2) instruccion -> print I_PARENTESIS valores D_PARENTESIS .

    $end            reduce using rule 2 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    PUNTO_COMA      reduce using rule 2 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    D_LLAVE         reduce using rule 2 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)


state 80

    (28) valores -> valor COMA . valores
    (27) valores -> . valor
    (28) valores -> . valor COMA valores
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 45
    valores                        shift and go to state 95

state 81

    (3) instruccion -> VAR ID type ASIGNACION . valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 96

state 82

    (4) instruccion -> VAR ID ASIGNACION valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    $end            reduce using rule 4 (instruccion -> VAR ID ASIGNACION valor .)
    PUNTO_COMA      reduce using rule 4 (instruccion -> VAR ID ASIGNACION valor .)
    D_LLAVE         reduce using rule 4 (instruccion -> VAR ID ASIGNACION valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 83

    (8) instruccion -> IF condicion I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 97


state 84

    (29) valor -> valor operacion_binaria valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

  ! shift/reduce conflict for ADICION resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
    I_LLAVE         reduce using rule 29 (valor -> valor operacion_binaria valor .)
    COMA            reduce using rule 29 (valor -> valor operacion_binaria valor .)
    D_PARENTESIS    reduce using rule 29 (valor -> valor operacion_binaria valor .)
    $end            reduce using rule 29 (valor -> valor operacion_binaria valor .)
    PUNTO_COMA      reduce using rule 29 (valor -> valor operacion_binaria valor .)
    D_LLAVE         reduce using rule 29 (valor -> valor operacion_binaria valor .)
    DOS_PUNTOS      reduce using rule 29 (valor -> valor operacion_binaria valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

  ! ADICION         [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! RESTA           [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MULTIPLICACION  [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! DIVISION        [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MODULO          [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! IGUAL           [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! DIFERENTE       [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MAYOR           [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]
  ! MENOR           [ reduce using rule 29 (valor -> valor operacion_binaria valor .) ]

    operacion_binaria              shift and go to state 57

state 85

    (25) condicion -> I_PARENTESIS valor D_PARENTESIS .

    I_LLAVE         reduce using rule 25 (condicion -> I_PARENTESIS valor D_PARENTESIS .)


state 86

    (9) instruccion -> ELSE I_LLAVE body D_LLAVE .

    $end            reduce using rule 9 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 9 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 9 (instruccion -> ELSE I_LLAVE body D_LLAVE .)


state 87

    (10) instruccion -> ELSEIF condicion I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 98


state 88

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE . ID I_LLAVE body D_LLAVE

    ID              shift and go to state 99


state 89

    (13) instruccion -> FOR ID COMA ID . DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE

    DECLARACION_ASIGNACION shift and go to state 100


state 90

    (12) instruccion -> FOR instruccion PUNTO_COMA valor . PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    PUNTO_COMA      shift and go to state 101
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 91

    (14) instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE . D_LLAVE
    (16) instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE . valores D_LLAVE
    (27) valores -> . valor
    (28) valores -> . valor COMA valores
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    D_LLAVE         shift and go to state 102
    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valores                        shift and go to state 103
    valor                          shift and go to state 45

state 92

    (15) instruccion -> I_CORCHETE INT D_CORCHETE type . I_LLAVE D_LLAVE
    (17) instruccion -> I_CORCHETE INT D_CORCHETE type . I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 104


state 93

    (18) instruccion -> MAP I_CORCHETE type D_CORCHETE . type I_LLAVE D_LLAVE
    (20) instruccion -> MAP I_CORCHETE type D_CORCHETE . type I_LLAVE claves_valores D_LLAVE
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 105

state 94

    (19) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE . type D_CORCHETE type D_PARENTESIS
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 106

state 95

    (28) valores -> valor COMA valores .

    D_PARENTESIS    reduce using rule 28 (valores -> valor COMA valores .)
    D_LLAVE         reduce using rule 28 (valores -> valor COMA valores .)


state 96

    (3) instruccion -> VAR ID type ASIGNACION valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    $end            reduce using rule 3 (instruccion -> VAR ID type ASIGNACION valor .)
    PUNTO_COMA      reduce using rule 3 (instruccion -> VAR ID type ASIGNACION valor .)
    D_LLAVE         reduce using rule 3 (instruccion -> VAR ID type ASIGNACION valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 97

    (8) instruccion -> IF condicion I_LLAVE body D_LLAVE .

    $end            reduce using rule 8 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 8 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 8 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)


state 98

    (10) instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .

    $end            reduce using rule 10 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 10 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 10 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)


state 99

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 107


state 100

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION . RANGE ID I_LLAVE body D_LLAVE

    RANGE           shift and go to state 108


state 101

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA . ID operador_matematico I_LLAVE body D_LLAVE

    ID              shift and go to state 109


state 102

    (14) instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE .

    $end            reduce using rule 14 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 14 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 14 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE .)


state 103

    (16) instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores . D_LLAVE

    D_LLAVE         shift and go to state 110


state 104

    (15) instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE . D_LLAVE
    (17) instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE . valores D_LLAVE
    (27) valores -> . valor
    (28) valores -> . valor COMA valores
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    D_LLAVE         shift and go to state 111
    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valores                        shift and go to state 112
    valor                          shift and go to state 45

state 105

    (18) instruccion -> MAP I_CORCHETE type D_CORCHETE type . I_LLAVE D_LLAVE
    (20) instruccion -> MAP I_CORCHETE type D_CORCHETE type . I_LLAVE claves_valores D_LLAVE

    I_LLAVE         shift and go to state 113


state 106

    (19) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type . D_CORCHETE type D_PARENTESIS

    D_CORCHETE      shift and go to state 114


state 107

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 115
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 108

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE . ID I_LLAVE body D_LLAVE

    ID              shift and go to state 116


state 109

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID . operador_matematico I_LLAVE body D_LLAVE
    (38) operador_matematico -> . INCREMENTO
    (39) operador_matematico -> . DECREMENTO

    INCREMENTO      shift and go to state 27
    DECREMENTO      shift and go to state 28

    operador_matematico            shift and go to state 117

state 110

    (16) instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE .

    $end            reduce using rule 16 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 16 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE .)
    D_LLAVE         reduce using rule 16 (instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE .)


state 111

    (15) instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE .

    $end            reduce using rule 15 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 15 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 15 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE .)


state 112

    (17) instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores . D_LLAVE

    D_LLAVE         shift and go to state 118


state 113

    (18) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE . D_LLAVE
    (20) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE . claves_valores D_LLAVE
    (22) claves_valores -> . clave_valor
    (23) claves_valores -> . clave_valor COMA claves_valores
    (21) clave_valor -> . valor DOS_PUNTOS valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    D_LLAVE         shift and go to state 119
    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    claves_valores                 shift and go to state 120
    clave_valor                    shift and go to state 121
    valor                          shift and go to state 122

state 114

    (19) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE . type D_PARENTESIS
    (33) type -> . BOOL
    (34) type -> . STRINGTYPE
    (35) type -> . INTEGER
    (36) type -> . FLOAT32
    (37) type -> . FLOAT64

    BOOL            shift and go to state 48
    STRINGTYPE      shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT32         shift and go to state 51
    FLOAT64         shift and go to state 52

    type                           shift and go to state 123

state 115

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 124


state 116

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 125


state 117

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 126


state 118

    (17) instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE .

    $end            reduce using rule 17 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 17 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE .)
    D_LLAVE         reduce using rule 17 (instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE .)


state 119

    (18) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .

    $end            reduce using rule 18 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 18 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 18 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)


state 120

    (20) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores . D_LLAVE

    D_LLAVE         shift and go to state 127


state 121

    (22) claves_valores -> clave_valor .
    (23) claves_valores -> clave_valor . COMA claves_valores

    D_LLAVE         reduce using rule 22 (claves_valores -> clave_valor .)
    COMA            shift and go to state 128


state 122

    (21) clave_valor -> valor . DOS_PUNTOS valor
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    DOS_PUNTOS      shift and go to state 129
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 123

    (19) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type . D_PARENTESIS

    D_PARENTESIS    shift and go to state 130


state 124

    (11) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .

    $end            reduce using rule 11 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 11 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 11 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)


state 125

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    body                           shift and go to state 131
    instruccion                    shift and go to state 2
    print                          shift and go to state 3

state 126

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE . body D_LLAVE
    (1) body -> . instruccion
    (2) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (3) instruccion -> . VAR ID type ASIGNACION valor
    (4) instruccion -> . VAR ID ASIGNACION valor
    (5) instruccion -> . ID asignacion valor
    (6) instruccion -> . ID asignacion instruccion
    (7) instruccion -> . ID operador_matematico
    (8) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (9) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (10) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (11) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (13) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (14) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE
    (15) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE
    (16) instruccion -> . I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE
    (17) instruccion -> . I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE
    (18) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (19) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (20) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (30) print -> . PRINTLN
    (31) print -> . PRINTF
    (32) print -> . PRINT

    VAR             shift and go to state 4
    ID              shift and go to state 5
    IF              shift and go to state 6
    ELSE            shift and go to state 7
    ELSEIF          shift and go to state 8
    FOR             shift and go to state 9
    I_CORCHETE      shift and go to state 10
    MAP             shift and go to state 11
    MAKE            shift and go to state 12
    PRINTLN         shift and go to state 13
    PRINTF          shift and go to state 14
    PRINT           shift and go to state 15

    instruccion                    shift and go to state 2
    body                           shift and go to state 132
    print                          shift and go to state 3

state 127

    (20) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .

    $end            reduce using rule 20 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 20 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    D_LLAVE         reduce using rule 20 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)


state 128

    (23) claves_valores -> clave_valor COMA . claves_valores
    (22) claves_valores -> . clave_valor
    (23) claves_valores -> . clave_valor COMA claves_valores
    (21) clave_valor -> . valor DOS_PUNTOS valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    clave_valor                    shift and go to state 121
    claves_valores                 shift and go to state 133
    valor                          shift and go to state 122

state 129

    (21) clave_valor -> valor DOS_PUNTOS . valor
    (29) valor -> . valor operacion_binaria valor
    (58) valor -> . INT
    (59) valor -> . DOUBLE
    (60) valor -> . STRING
    (61) valor -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35

    valor                          shift and go to state 134

state 130

    (19) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .

    $end            reduce using rule 19 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    PUNTO_COMA      reduce using rule 19 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    D_LLAVE         reduce using rule 19 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)


state 131

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 135


state 132

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 136


state 133

    (23) claves_valores -> clave_valor COMA claves_valores .

    D_LLAVE         reduce using rule 23 (claves_valores -> clave_valor COMA claves_valores .)


state 134

    (21) clave_valor -> valor DOS_PUNTOS valor .
    (29) valor -> valor . operacion_binaria valor
    (47) operacion_binaria -> . ADICION
    (48) operacion_binaria -> . RESTA
    (49) operacion_binaria -> . MULTIPLICACION
    (50) operacion_binaria -> . DIVISION
    (51) operacion_binaria -> . MODULO
    (52) operacion_binaria -> . MENOR_IGUAL
    (53) operacion_binaria -> . IGUAL
    (54) operacion_binaria -> . DIFERENTE
    (55) operacion_binaria -> . MAYOR
    (56) operacion_binaria -> . MAYOR_IGUAL
    (57) operacion_binaria -> . MENOR

    COMA            reduce using rule 21 (clave_valor -> valor DOS_PUNTOS valor .)
    D_LLAVE         reduce using rule 21 (clave_valor -> valor DOS_PUNTOS valor .)
    ADICION         shift and go to state 58
    RESTA           shift and go to state 59
    MULTIPLICACION  shift and go to state 60
    DIVISION        shift and go to state 61
    MODULO          shift and go to state 62
    MENOR_IGUAL     shift and go to state 63
    IGUAL           shift and go to state 64
    DIFERENTE       shift and go to state 65
    MAYOR           shift and go to state 66
    MAYOR_IGUAL     shift and go to state 67
    MENOR           shift and go to state 68

    operacion_binaria              shift and go to state 57

state 135

    (13) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .

    $end            reduce using rule 13 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 13 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 13 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)


state 136

    (12) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .

    $end            reduce using rule 12 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 12 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 12 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADICION in state 84 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 84 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 84 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 84 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 84 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 84 resolved as shift
