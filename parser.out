Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CHAN
    CONST
    CONTINUE
    DEFAULT
    DEFER
    FALLTHROUGH
    GO
    GOTO
    IDENTIFICADOR
    IMPORT
    INTERFACE
    NOT
    OR
    PACKAGE
    PUNTO
    SELECT
    SWITCH

Grammar

Rule 0     S' -> go
Rule 1     go -> instruccion
Rule 2     go -> funcion go
Rule 3     go -> funcion
Rule 4     body -> instruccion
Rule 5     body -> I_LLAVE instruct_expression D_LLAVE
Rule 6     body -> I_LLAVE varias_instrucciones
Rule 7     body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE
Rule 8     body -> I_LLAVE D_LLAVE
Rule 9     varias_instrucciones -> instruccion
Rule 10    varias_instrucciones -> instruccion varias_instrucciones
Rule 11    instruct_expression -> RETURN valor
Rule 12    instruccion -> print I_PARENTESIS valores D_PARENTESIS
Rule 13    instruccion -> VAR ID type ASIGNACION valor
Rule 14    instruccion -> VAR ID ASIGNACION valor
Rule 15    instruccion -> VAR ID ASIGNACION instruccion
Rule 16    instruccion -> ID asignacion valor
Rule 17    instruccion -> ID asignacion instruccion
Rule 18    instruccion -> ID operador_matematico
Rule 19    funcion -> FUNC ID cuerpo_fun
Rule 20    cuerpo_fun -> parametrosMetodo body
Rule 21    parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type
Rule 22    parametros -> atributo
Rule 23    parametros -> atributo COMA parametros
Rule 24    parametros -> <empty>
Rule 25    instruccion -> IF condicion I_LLAVE body D_LLAVE
Rule 26    instruccion -> ELSE I_LLAVE body D_LLAVE
Rule 27    instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE
Rule 28    instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
Rule 29    instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
Rule 30    instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
Rule 31    instruccion -> array_int
Rule 32    instruccion -> array_double
Rule 33    instruccion -> array_string
Rule 34    instruccion -> array_boolean
Rule 35    instruccion -> array_length_int
Rule 36    instruccion -> array_length_double
Rule 37    instruccion -> array_length_string
Rule 38    instruccion -> array_length_boolean
Rule 39    instruccion -> array_con_valores_int
Rule 40    instruccion -> array_con_valores_double
Rule 41    instruccion -> array_con_valores_string
Rule 42    instruccion -> array_con_valores_boolean
Rule 43    instruccion -> array_length_con_valores_int
Rule 44    instruccion -> array_length_con_valores_double
Rule 45    instruccion -> array_length_con_valores_string
Rule 46    instruccion -> array_length_con_valores_boolean
Rule 47    array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
Rule 48    array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
Rule 49    array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
Rule 50    array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
Rule 51    array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
Rule 52    array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
Rule 53    array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
Rule 54    array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
Rule 55    array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
Rule 56    array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
Rule 57    array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
Rule 58    array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
Rule 59    array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
Rule 60    array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
Rule 61    array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
Rule 62    array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
Rule 63    instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
Rule 64    instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
Rule 65    instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
Rule 66    instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
Rule 67    atributos_struct -> atributo
Rule 68    atributos_struct -> atributo atributos_struct
Rule 69    atributo -> ID type
Rule 70    instruccion -> init_struct
Rule 71    init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
Rule 72    init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE
Rule 73    clave_valor -> valor DOS_PUNTOS valor
Rule 74    claves_valores -> clave_valor
Rule 75    claves_valores -> clave_valor COMA claves_valores
Rule 76    condicion -> valor
Rule 77    condicion -> I_PARENTESIS valor D_PARENTESIS
Rule 78    iteracion_for -> ID
Rule 79    valores -> valor
Rule 80    valores -> valor COMA valores
Rule 81    valores_int -> valor_int
Rule 82    valores_int -> valor_int COMA valores_int
Rule 83    valores_double -> valor_double
Rule 84    valores_double -> valor_double COMA valores_double
Rule 85    valores_string -> valor_string
Rule 86    valores_string -> valor_string COMA valores_string
Rule 87    valores_boolean -> valor_boolean
Rule 88    valores_boolean -> valor_boolean COMA valores_boolean
Rule 89    valor -> valor operacion_binaria valor
Rule 90    print -> PRINTLN
Rule 91    print -> PRINTF
Rule 92    print -> PRINT
Rule 93    type -> BOOL
Rule 94    type -> STRINGTYPE
Rule 95    type -> INTEGER
Rule 96    type -> FLOAT32
Rule 97    type -> FLOAT64
Rule 98    operador_matematico -> INCREMENTO
Rule 99    operador_matematico -> DECREMENTO
Rule 100   asignacion -> ASIGNACION
Rule 101   asignacion -> ASIGNACION_ADICION
Rule 102   asignacion -> ASIGNACION_RESTA
Rule 103   asignacion -> ASIGNACION_MULTI
Rule 104   asignacion -> DECLARACION_ASIGNACION
Rule 105   asignacion -> ASIGNACION_DIVISION
Rule 106   asignacion -> ASIGNACION_MODULO
Rule 107   operacion_binaria -> ADICION
Rule 108   operacion_binaria -> RESTA
Rule 109   operacion_binaria -> MULTIPLICACION
Rule 110   operacion_binaria -> DIVISION
Rule 111   operacion_binaria -> MODULO
Rule 112   operacion_binaria -> MENOR_IGUAL
Rule 113   operacion_binaria -> IGUAL
Rule 114   operacion_binaria -> DIFERENTE
Rule 115   operacion_binaria -> MAYOR
Rule 116   operacion_binaria -> MAYOR_IGUAL
Rule 117   operacion_binaria -> MENOR
Rule 118   valor -> valor_int
Rule 119   valor -> valor_double
Rule 120   valor -> valor_string
Rule 121   valor -> valor_boolean
Rule 122   valor -> valor_variable
Rule 123   valor_int -> INT
Rule 124   valor_double -> DOUBLE
Rule 125   valor_string -> STRING
Rule 126   valor_boolean -> BOOLEAN
Rule 127   valor_variable -> ID

Terminals, with rules where they appear

ADICION              : 107
AND                  : 
ASIGNACION           : 13 14 15 71 100
ASIGNACION_ADICION   : 101
ASIGNACION_DIVISION  : 105
ASIGNACION_MODULO    : 106
ASIGNACION_MULTI     : 103
ASIGNACION_RESTA     : 102
BOOL                 : 93
BOOLEAN              : 50 54 58 62 126
BREAK                : 
CASE                 : 
CHAN                 : 
COMA                 : 23 30 75 80 82 84 86 88
CONST                : 
CONTINUE             : 
DECLARACION_ASIGNACION : 28 30 72 104
DECREMENTO           : 99
DEFAULT              : 
DEFER                : 
DIFERENTE            : 114
DIVISION             : 110
DOS_PUNTOS           : 73
DOUBLE               : 48 52 56 60 124
D_CORCHETE           : 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65
D_LLAVE              : 5 7 8 25 26 27 28 29 30 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 71 72
D_PARENTESIS         : 12 21 64 77
ELSE                 : 26
ELSEIF               : 27
FALLTHROUGH          : 
FLOAT32              : 96
FLOAT64              : 97
FOR                  : 28 29 30
FUNC                 : 19
GO                   : 
GOTO                 : 
ID                   : 13 14 15 16 17 18 19 28 28 29 30 30 30 66 69 71 71 71 72 72 78 127
IDENTIFICADOR        : 
IF                   : 25
IGUAL                : 113
IMPORT               : 
INCREMENTO           : 98
INT                  : 47 51 51 52 53 54 55 59 59 60 61 62 123
INTEGER              : 95
INTERFACE            : 
I_CORCHETE           : 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65
I_LLAVE              : 5 6 7 8 25 26 27 28 29 30 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 71 72
I_PARENTESIS         : 12 21 64 77
MAKE                 : 64
MAP                  : 63 64 65
MAYOR                : 115
MAYOR_IGUAL          : 116
MENOR                : 117
MENOR_IGUAL          : 112
MODULO               : 111
MULTIPLICACION       : 109
NOT                  : 
OR                   : 
PACKAGE              : 
PRINT                : 92
PRINTF               : 91
PRINTLN              : 90
PUNTO                : 
PUNTO_COMA           : 29 29
RANGE                : 28 30
RESTA                : 108
RETURN               : 11
SELECT               : 
STRING               : 49 53 57 61 125
STRINGTYPE           : 94
STRUCT               : 66
SWITCH               : 
TYPE                 : 66
VAR                  : 13 14 15 71
error                : 

Nonterminals, with rules where they appear

array_boolean        : 34
array_con_valores_boolean : 42
array_con_valores_double : 40
array_con_valores_int : 39
array_con_valores_string : 41
array_double         : 32
array_int            : 31
array_length_boolean : 38
array_length_con_valores_boolean : 46
array_length_con_valores_double : 44
array_length_con_valores_int : 43
array_length_con_valores_string : 45
array_length_double  : 36
array_length_int     : 35
array_length_string  : 37
array_string         : 33
asignacion           : 16 17
atributo             : 22 23 67 68
atributos_struct     : 66 68
body                 : 20 25 26 27 28 29 30
clave_valor          : 74 75
claves_valores       : 65 75
condicion            : 25 27
cuerpo_fun           : 19
funcion              : 2 3
go                   : 2 0
init_struct          : 70
instruccion          : 1 4 9 10 15 17 29
instruct_expression  : 5 7
iteracion_for        : 
operacion_binaria    : 89
operador_matematico  : 18 29
parametros           : 21 23
parametrosMetodo     : 20
print                : 12
type                 : 13 21 63 63 64 64 65 65 69
valor                : 11 13 14 16 29 73 73 76 77 79 80 89 89
valor_boolean        : 87 88 121
valor_double         : 83 84 119
valor_int            : 81 82 118
valor_string         : 85 86 120
valor_variable       : 122
valores              : 12 71 72 80
valores_boolean      : 58 62 88
valores_double       : 56 60 84
valores_int          : 55 59 82
valores_string       : 57 61 86
varias_instrucciones : 6 7 10

Parsing method: LALR

state 0

    (0) S' -> . go
    (1) go -> . instruccion
    (2) go -> . funcion go
    (3) go -> . funcion
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (19) funcion -> . FUNC ID cuerpo_fun
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    FUNC            shift and go to state 32
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    go                             shift and go to state 1
    instruccion                    shift and go to state 2
    funcion                        shift and go to state 3
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 1

    (0) S' -> go .



state 2

    (1) go -> instruccion .

    $end            reduce using rule 1 (go -> instruccion .)


state 3

    (2) go -> funcion . go
    (3) go -> funcion .
    (1) go -> . instruccion
    (2) go -> . funcion go
    (3) go -> . funcion
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (19) funcion -> . FUNC ID cuerpo_fun
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    $end            reduce using rule 3 (go -> funcion .)
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    FUNC            shift and go to state 32
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    funcion                        shift and go to state 3
    go                             shift and go to state 36
    instruccion                    shift and go to state 2
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 4

    (12) instruccion -> print . I_PARENTESIS valores D_PARENTESIS

    I_PARENTESIS    shift and go to state 37


state 5

    (13) instruccion -> VAR . ID type ASIGNACION valor
    (14) instruccion -> VAR . ID ASIGNACION valor
    (15) instruccion -> VAR . ID ASIGNACION instruccion
    (71) init_struct -> VAR . ID ID ASIGNACION ID I_LLAVE valores D_LLAVE

    ID              shift and go to state 38


state 6

    (16) instruccion -> ID . asignacion valor
    (17) instruccion -> ID . asignacion instruccion
    (18) instruccion -> ID . operador_matematico
    (72) init_struct -> ID . DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE
    (100) asignacion -> . ASIGNACION
    (101) asignacion -> . ASIGNACION_ADICION
    (102) asignacion -> . ASIGNACION_RESTA
    (103) asignacion -> . ASIGNACION_MULTI
    (104) asignacion -> . DECLARACION_ASIGNACION
    (105) asignacion -> . ASIGNACION_DIVISION
    (106) asignacion -> . ASIGNACION_MODULO
    (98) operador_matematico -> . INCREMENTO
    (99) operador_matematico -> . DECREMENTO

    DECLARACION_ASIGNACION shift and go to state 41
    ASIGNACION      shift and go to state 42
    ASIGNACION_ADICION shift and go to state 43
    ASIGNACION_RESTA shift and go to state 44
    ASIGNACION_MULTI shift and go to state 45
    ASIGNACION_DIVISION shift and go to state 46
    ASIGNACION_MODULO shift and go to state 47
    INCREMENTO      shift and go to state 48
    DECREMENTO      shift and go to state 49

    asignacion                     shift and go to state 39
    operador_matematico            shift and go to state 40

state 7

    (25) instruccion -> IF . condicion I_LLAVE body D_LLAVE
    (76) condicion -> . valor
    (77) condicion -> . I_PARENTESIS valor D_PARENTESIS
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    I_PARENTESIS    shift and go to state 52
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    condicion                      shift and go to state 50
    valor                          shift and go to state 51
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 8

    (26) instruccion -> ELSE . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 63


state 9

    (27) instruccion -> ELSEIF . condicion I_LLAVE body D_LLAVE
    (76) condicion -> . valor
    (77) condicion -> . I_PARENTESIS valor D_PARENTESIS
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    I_PARENTESIS    shift and go to state 52
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    condicion                      shift and go to state 64
    valor                          shift and go to state 51
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 10

    (28) instruccion -> FOR . ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> FOR . instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> FOR . ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    ID              shift and go to state 65
    VAR             shift and go to state 5
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    instruccion                    shift and go to state 66
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 11

    (31) instruccion -> array_int .

    $end            reduce using rule 31 (instruccion -> array_int .)
    PUNTO_COMA      reduce using rule 31 (instruccion -> array_int .)
    D_LLAVE         reduce using rule 31 (instruccion -> array_int .)
    VAR             reduce using rule 31 (instruccion -> array_int .)
    ID              reduce using rule 31 (instruccion -> array_int .)
    IF              reduce using rule 31 (instruccion -> array_int .)
    ELSE            reduce using rule 31 (instruccion -> array_int .)
    ELSEIF          reduce using rule 31 (instruccion -> array_int .)
    FOR             reduce using rule 31 (instruccion -> array_int .)
    MAP             reduce using rule 31 (instruccion -> array_int .)
    MAKE            reduce using rule 31 (instruccion -> array_int .)
    TYPE            reduce using rule 31 (instruccion -> array_int .)
    PRINTLN         reduce using rule 31 (instruccion -> array_int .)
    PRINTF          reduce using rule 31 (instruccion -> array_int .)
    PRINT           reduce using rule 31 (instruccion -> array_int .)
    I_CORCHETE      reduce using rule 31 (instruccion -> array_int .)
    RETURN          reduce using rule 31 (instruccion -> array_int .)
    FUNC            reduce using rule 31 (instruccion -> array_int .)


state 12

    (32) instruccion -> array_double .

    $end            reduce using rule 32 (instruccion -> array_double .)
    PUNTO_COMA      reduce using rule 32 (instruccion -> array_double .)
    D_LLAVE         reduce using rule 32 (instruccion -> array_double .)
    VAR             reduce using rule 32 (instruccion -> array_double .)
    ID              reduce using rule 32 (instruccion -> array_double .)
    IF              reduce using rule 32 (instruccion -> array_double .)
    ELSE            reduce using rule 32 (instruccion -> array_double .)
    ELSEIF          reduce using rule 32 (instruccion -> array_double .)
    FOR             reduce using rule 32 (instruccion -> array_double .)
    MAP             reduce using rule 32 (instruccion -> array_double .)
    MAKE            reduce using rule 32 (instruccion -> array_double .)
    TYPE            reduce using rule 32 (instruccion -> array_double .)
    PRINTLN         reduce using rule 32 (instruccion -> array_double .)
    PRINTF          reduce using rule 32 (instruccion -> array_double .)
    PRINT           reduce using rule 32 (instruccion -> array_double .)
    I_CORCHETE      reduce using rule 32 (instruccion -> array_double .)
    RETURN          reduce using rule 32 (instruccion -> array_double .)
    FUNC            reduce using rule 32 (instruccion -> array_double .)


state 13

    (33) instruccion -> array_string .

    $end            reduce using rule 33 (instruccion -> array_string .)
    PUNTO_COMA      reduce using rule 33 (instruccion -> array_string .)
    D_LLAVE         reduce using rule 33 (instruccion -> array_string .)
    VAR             reduce using rule 33 (instruccion -> array_string .)
    ID              reduce using rule 33 (instruccion -> array_string .)
    IF              reduce using rule 33 (instruccion -> array_string .)
    ELSE            reduce using rule 33 (instruccion -> array_string .)
    ELSEIF          reduce using rule 33 (instruccion -> array_string .)
    FOR             reduce using rule 33 (instruccion -> array_string .)
    MAP             reduce using rule 33 (instruccion -> array_string .)
    MAKE            reduce using rule 33 (instruccion -> array_string .)
    TYPE            reduce using rule 33 (instruccion -> array_string .)
    PRINTLN         reduce using rule 33 (instruccion -> array_string .)
    PRINTF          reduce using rule 33 (instruccion -> array_string .)
    PRINT           reduce using rule 33 (instruccion -> array_string .)
    I_CORCHETE      reduce using rule 33 (instruccion -> array_string .)
    RETURN          reduce using rule 33 (instruccion -> array_string .)
    FUNC            reduce using rule 33 (instruccion -> array_string .)


state 14

    (34) instruccion -> array_boolean .

    $end            reduce using rule 34 (instruccion -> array_boolean .)
    PUNTO_COMA      reduce using rule 34 (instruccion -> array_boolean .)
    D_LLAVE         reduce using rule 34 (instruccion -> array_boolean .)
    VAR             reduce using rule 34 (instruccion -> array_boolean .)
    ID              reduce using rule 34 (instruccion -> array_boolean .)
    IF              reduce using rule 34 (instruccion -> array_boolean .)
    ELSE            reduce using rule 34 (instruccion -> array_boolean .)
    ELSEIF          reduce using rule 34 (instruccion -> array_boolean .)
    FOR             reduce using rule 34 (instruccion -> array_boolean .)
    MAP             reduce using rule 34 (instruccion -> array_boolean .)
    MAKE            reduce using rule 34 (instruccion -> array_boolean .)
    TYPE            reduce using rule 34 (instruccion -> array_boolean .)
    PRINTLN         reduce using rule 34 (instruccion -> array_boolean .)
    PRINTF          reduce using rule 34 (instruccion -> array_boolean .)
    PRINT           reduce using rule 34 (instruccion -> array_boolean .)
    I_CORCHETE      reduce using rule 34 (instruccion -> array_boolean .)
    RETURN          reduce using rule 34 (instruccion -> array_boolean .)
    FUNC            reduce using rule 34 (instruccion -> array_boolean .)


state 15

    (35) instruccion -> array_length_int .

    $end            reduce using rule 35 (instruccion -> array_length_int .)
    PUNTO_COMA      reduce using rule 35 (instruccion -> array_length_int .)
    D_LLAVE         reduce using rule 35 (instruccion -> array_length_int .)
    VAR             reduce using rule 35 (instruccion -> array_length_int .)
    ID              reduce using rule 35 (instruccion -> array_length_int .)
    IF              reduce using rule 35 (instruccion -> array_length_int .)
    ELSE            reduce using rule 35 (instruccion -> array_length_int .)
    ELSEIF          reduce using rule 35 (instruccion -> array_length_int .)
    FOR             reduce using rule 35 (instruccion -> array_length_int .)
    MAP             reduce using rule 35 (instruccion -> array_length_int .)
    MAKE            reduce using rule 35 (instruccion -> array_length_int .)
    TYPE            reduce using rule 35 (instruccion -> array_length_int .)
    PRINTLN         reduce using rule 35 (instruccion -> array_length_int .)
    PRINTF          reduce using rule 35 (instruccion -> array_length_int .)
    PRINT           reduce using rule 35 (instruccion -> array_length_int .)
    I_CORCHETE      reduce using rule 35 (instruccion -> array_length_int .)
    RETURN          reduce using rule 35 (instruccion -> array_length_int .)
    FUNC            reduce using rule 35 (instruccion -> array_length_int .)


state 16

    (36) instruccion -> array_length_double .

    $end            reduce using rule 36 (instruccion -> array_length_double .)
    PUNTO_COMA      reduce using rule 36 (instruccion -> array_length_double .)
    D_LLAVE         reduce using rule 36 (instruccion -> array_length_double .)
    VAR             reduce using rule 36 (instruccion -> array_length_double .)
    ID              reduce using rule 36 (instruccion -> array_length_double .)
    IF              reduce using rule 36 (instruccion -> array_length_double .)
    ELSE            reduce using rule 36 (instruccion -> array_length_double .)
    ELSEIF          reduce using rule 36 (instruccion -> array_length_double .)
    FOR             reduce using rule 36 (instruccion -> array_length_double .)
    MAP             reduce using rule 36 (instruccion -> array_length_double .)
    MAKE            reduce using rule 36 (instruccion -> array_length_double .)
    TYPE            reduce using rule 36 (instruccion -> array_length_double .)
    PRINTLN         reduce using rule 36 (instruccion -> array_length_double .)
    PRINTF          reduce using rule 36 (instruccion -> array_length_double .)
    PRINT           reduce using rule 36 (instruccion -> array_length_double .)
    I_CORCHETE      reduce using rule 36 (instruccion -> array_length_double .)
    RETURN          reduce using rule 36 (instruccion -> array_length_double .)
    FUNC            reduce using rule 36 (instruccion -> array_length_double .)


state 17

    (37) instruccion -> array_length_string .

    $end            reduce using rule 37 (instruccion -> array_length_string .)
    PUNTO_COMA      reduce using rule 37 (instruccion -> array_length_string .)
    D_LLAVE         reduce using rule 37 (instruccion -> array_length_string .)
    VAR             reduce using rule 37 (instruccion -> array_length_string .)
    ID              reduce using rule 37 (instruccion -> array_length_string .)
    IF              reduce using rule 37 (instruccion -> array_length_string .)
    ELSE            reduce using rule 37 (instruccion -> array_length_string .)
    ELSEIF          reduce using rule 37 (instruccion -> array_length_string .)
    FOR             reduce using rule 37 (instruccion -> array_length_string .)
    MAP             reduce using rule 37 (instruccion -> array_length_string .)
    MAKE            reduce using rule 37 (instruccion -> array_length_string .)
    TYPE            reduce using rule 37 (instruccion -> array_length_string .)
    PRINTLN         reduce using rule 37 (instruccion -> array_length_string .)
    PRINTF          reduce using rule 37 (instruccion -> array_length_string .)
    PRINT           reduce using rule 37 (instruccion -> array_length_string .)
    I_CORCHETE      reduce using rule 37 (instruccion -> array_length_string .)
    RETURN          reduce using rule 37 (instruccion -> array_length_string .)
    FUNC            reduce using rule 37 (instruccion -> array_length_string .)


state 18

    (38) instruccion -> array_length_boolean .

    $end            reduce using rule 38 (instruccion -> array_length_boolean .)
    PUNTO_COMA      reduce using rule 38 (instruccion -> array_length_boolean .)
    D_LLAVE         reduce using rule 38 (instruccion -> array_length_boolean .)
    VAR             reduce using rule 38 (instruccion -> array_length_boolean .)
    ID              reduce using rule 38 (instruccion -> array_length_boolean .)
    IF              reduce using rule 38 (instruccion -> array_length_boolean .)
    ELSE            reduce using rule 38 (instruccion -> array_length_boolean .)
    ELSEIF          reduce using rule 38 (instruccion -> array_length_boolean .)
    FOR             reduce using rule 38 (instruccion -> array_length_boolean .)
    MAP             reduce using rule 38 (instruccion -> array_length_boolean .)
    MAKE            reduce using rule 38 (instruccion -> array_length_boolean .)
    TYPE            reduce using rule 38 (instruccion -> array_length_boolean .)
    PRINTLN         reduce using rule 38 (instruccion -> array_length_boolean .)
    PRINTF          reduce using rule 38 (instruccion -> array_length_boolean .)
    PRINT           reduce using rule 38 (instruccion -> array_length_boolean .)
    I_CORCHETE      reduce using rule 38 (instruccion -> array_length_boolean .)
    RETURN          reduce using rule 38 (instruccion -> array_length_boolean .)
    FUNC            reduce using rule 38 (instruccion -> array_length_boolean .)


state 19

    (39) instruccion -> array_con_valores_int .

    $end            reduce using rule 39 (instruccion -> array_con_valores_int .)
    PUNTO_COMA      reduce using rule 39 (instruccion -> array_con_valores_int .)
    D_LLAVE         reduce using rule 39 (instruccion -> array_con_valores_int .)
    VAR             reduce using rule 39 (instruccion -> array_con_valores_int .)
    ID              reduce using rule 39 (instruccion -> array_con_valores_int .)
    IF              reduce using rule 39 (instruccion -> array_con_valores_int .)
    ELSE            reduce using rule 39 (instruccion -> array_con_valores_int .)
    ELSEIF          reduce using rule 39 (instruccion -> array_con_valores_int .)
    FOR             reduce using rule 39 (instruccion -> array_con_valores_int .)
    MAP             reduce using rule 39 (instruccion -> array_con_valores_int .)
    MAKE            reduce using rule 39 (instruccion -> array_con_valores_int .)
    TYPE            reduce using rule 39 (instruccion -> array_con_valores_int .)
    PRINTLN         reduce using rule 39 (instruccion -> array_con_valores_int .)
    PRINTF          reduce using rule 39 (instruccion -> array_con_valores_int .)
    PRINT           reduce using rule 39 (instruccion -> array_con_valores_int .)
    I_CORCHETE      reduce using rule 39 (instruccion -> array_con_valores_int .)
    RETURN          reduce using rule 39 (instruccion -> array_con_valores_int .)
    FUNC            reduce using rule 39 (instruccion -> array_con_valores_int .)


state 20

    (40) instruccion -> array_con_valores_double .

    $end            reduce using rule 40 (instruccion -> array_con_valores_double .)
    PUNTO_COMA      reduce using rule 40 (instruccion -> array_con_valores_double .)
    D_LLAVE         reduce using rule 40 (instruccion -> array_con_valores_double .)
    VAR             reduce using rule 40 (instruccion -> array_con_valores_double .)
    ID              reduce using rule 40 (instruccion -> array_con_valores_double .)
    IF              reduce using rule 40 (instruccion -> array_con_valores_double .)
    ELSE            reduce using rule 40 (instruccion -> array_con_valores_double .)
    ELSEIF          reduce using rule 40 (instruccion -> array_con_valores_double .)
    FOR             reduce using rule 40 (instruccion -> array_con_valores_double .)
    MAP             reduce using rule 40 (instruccion -> array_con_valores_double .)
    MAKE            reduce using rule 40 (instruccion -> array_con_valores_double .)
    TYPE            reduce using rule 40 (instruccion -> array_con_valores_double .)
    PRINTLN         reduce using rule 40 (instruccion -> array_con_valores_double .)
    PRINTF          reduce using rule 40 (instruccion -> array_con_valores_double .)
    PRINT           reduce using rule 40 (instruccion -> array_con_valores_double .)
    I_CORCHETE      reduce using rule 40 (instruccion -> array_con_valores_double .)
    RETURN          reduce using rule 40 (instruccion -> array_con_valores_double .)
    FUNC            reduce using rule 40 (instruccion -> array_con_valores_double .)


state 21

    (41) instruccion -> array_con_valores_string .

    $end            reduce using rule 41 (instruccion -> array_con_valores_string .)
    PUNTO_COMA      reduce using rule 41 (instruccion -> array_con_valores_string .)
    D_LLAVE         reduce using rule 41 (instruccion -> array_con_valores_string .)
    VAR             reduce using rule 41 (instruccion -> array_con_valores_string .)
    ID              reduce using rule 41 (instruccion -> array_con_valores_string .)
    IF              reduce using rule 41 (instruccion -> array_con_valores_string .)
    ELSE            reduce using rule 41 (instruccion -> array_con_valores_string .)
    ELSEIF          reduce using rule 41 (instruccion -> array_con_valores_string .)
    FOR             reduce using rule 41 (instruccion -> array_con_valores_string .)
    MAP             reduce using rule 41 (instruccion -> array_con_valores_string .)
    MAKE            reduce using rule 41 (instruccion -> array_con_valores_string .)
    TYPE            reduce using rule 41 (instruccion -> array_con_valores_string .)
    PRINTLN         reduce using rule 41 (instruccion -> array_con_valores_string .)
    PRINTF          reduce using rule 41 (instruccion -> array_con_valores_string .)
    PRINT           reduce using rule 41 (instruccion -> array_con_valores_string .)
    I_CORCHETE      reduce using rule 41 (instruccion -> array_con_valores_string .)
    RETURN          reduce using rule 41 (instruccion -> array_con_valores_string .)
    FUNC            reduce using rule 41 (instruccion -> array_con_valores_string .)


state 22

    (42) instruccion -> array_con_valores_boolean .

    $end            reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    PUNTO_COMA      reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    D_LLAVE         reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    VAR             reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    ID              reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    IF              reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    ELSE            reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    ELSEIF          reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    FOR             reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    MAP             reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    MAKE            reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    TYPE            reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    PRINTLN         reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    PRINTF          reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    PRINT           reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    I_CORCHETE      reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    RETURN          reduce using rule 42 (instruccion -> array_con_valores_boolean .)
    FUNC            reduce using rule 42 (instruccion -> array_con_valores_boolean .)


state 23

    (43) instruccion -> array_length_con_valores_int .

    $end            reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    PUNTO_COMA      reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    D_LLAVE         reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    VAR             reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    ID              reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    IF              reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    ELSE            reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    ELSEIF          reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    FOR             reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    MAP             reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    MAKE            reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    TYPE            reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    PRINTLN         reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    PRINTF          reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    PRINT           reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    I_CORCHETE      reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    RETURN          reduce using rule 43 (instruccion -> array_length_con_valores_int .)
    FUNC            reduce using rule 43 (instruccion -> array_length_con_valores_int .)


state 24

    (44) instruccion -> array_length_con_valores_double .

    $end            reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    PUNTO_COMA      reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    D_LLAVE         reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    VAR             reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    ID              reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    IF              reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    ELSE            reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    ELSEIF          reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    FOR             reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    MAP             reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    MAKE            reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    TYPE            reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    PRINTLN         reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    PRINTF          reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    PRINT           reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    I_CORCHETE      reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    RETURN          reduce using rule 44 (instruccion -> array_length_con_valores_double .)
    FUNC            reduce using rule 44 (instruccion -> array_length_con_valores_double .)


state 25

    (45) instruccion -> array_length_con_valores_string .

    $end            reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    PUNTO_COMA      reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    D_LLAVE         reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    VAR             reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    ID              reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    IF              reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    ELSE            reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    ELSEIF          reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    FOR             reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    MAP             reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    MAKE            reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    TYPE            reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    PRINTLN         reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    PRINTF          reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    PRINT           reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    I_CORCHETE      reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    RETURN          reduce using rule 45 (instruccion -> array_length_con_valores_string .)
    FUNC            reduce using rule 45 (instruccion -> array_length_con_valores_string .)


state 26

    (46) instruccion -> array_length_con_valores_boolean .

    $end            reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    PUNTO_COMA      reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    D_LLAVE         reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    VAR             reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    ID              reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    IF              reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    ELSE            reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    ELSEIF          reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    FOR             reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    MAP             reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    MAKE            reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    TYPE            reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    PRINTLN         reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    PRINTF          reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    PRINT           reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    I_CORCHETE      reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    RETURN          reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)
    FUNC            reduce using rule 46 (instruccion -> array_length_con_valores_boolean .)


state 27

    (63) instruccion -> MAP . I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (65) instruccion -> MAP . I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE

    I_CORCHETE      shift and go to state 67


state 28

    (47) array_int -> I_CORCHETE . D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> I_CORCHETE . D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> I_CORCHETE . D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> I_CORCHETE . D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> I_CORCHETE . INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> I_CORCHETE . INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> I_CORCHETE . INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> I_CORCHETE . INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> I_CORCHETE . D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> I_CORCHETE . D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> I_CORCHETE . D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> I_CORCHETE . D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> I_CORCHETE . INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> I_CORCHETE . INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> I_CORCHETE . INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> I_CORCHETE . INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE

    D_CORCHETE      shift and go to state 68
    INT             shift and go to state 69


state 29

    (64) instruccion -> MAKE . I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS

    I_PARENTESIS    shift and go to state 70


state 30

    (66) instruccion -> TYPE . ID STRUCT I_LLAVE atributos_struct D_LLAVE

    ID              shift and go to state 71


state 31

    (70) instruccion -> init_struct .

    $end            reduce using rule 70 (instruccion -> init_struct .)
    PUNTO_COMA      reduce using rule 70 (instruccion -> init_struct .)
    D_LLAVE         reduce using rule 70 (instruccion -> init_struct .)
    VAR             reduce using rule 70 (instruccion -> init_struct .)
    ID              reduce using rule 70 (instruccion -> init_struct .)
    IF              reduce using rule 70 (instruccion -> init_struct .)
    ELSE            reduce using rule 70 (instruccion -> init_struct .)
    ELSEIF          reduce using rule 70 (instruccion -> init_struct .)
    FOR             reduce using rule 70 (instruccion -> init_struct .)
    MAP             reduce using rule 70 (instruccion -> init_struct .)
    MAKE            reduce using rule 70 (instruccion -> init_struct .)
    TYPE            reduce using rule 70 (instruccion -> init_struct .)
    PRINTLN         reduce using rule 70 (instruccion -> init_struct .)
    PRINTF          reduce using rule 70 (instruccion -> init_struct .)
    PRINT           reduce using rule 70 (instruccion -> init_struct .)
    I_CORCHETE      reduce using rule 70 (instruccion -> init_struct .)
    RETURN          reduce using rule 70 (instruccion -> init_struct .)
    FUNC            reduce using rule 70 (instruccion -> init_struct .)


state 32

    (19) funcion -> FUNC . ID cuerpo_fun

    ID              shift and go to state 72


state 33

    (90) print -> PRINTLN .

    I_PARENTESIS    reduce using rule 90 (print -> PRINTLN .)


state 34

    (91) print -> PRINTF .

    I_PARENTESIS    reduce using rule 91 (print -> PRINTF .)


state 35

    (92) print -> PRINT .

    I_PARENTESIS    reduce using rule 92 (print -> PRINT .)


state 36

    (2) go -> funcion go .

    $end            reduce using rule 2 (go -> funcion go .)


state 37

    (12) instruccion -> print I_PARENTESIS . valores D_PARENTESIS
    (79) valores -> . valor
    (80) valores -> . valor COMA valores
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valores                        shift and go to state 73
    valor                          shift and go to state 74
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 38

    (13) instruccion -> VAR ID . type ASIGNACION valor
    (14) instruccion -> VAR ID . ASIGNACION valor
    (15) instruccion -> VAR ID . ASIGNACION instruccion
    (71) init_struct -> VAR ID . ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    ASIGNACION      shift and go to state 77
    ID              shift and go to state 75
    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 76

state 39

    (16) instruccion -> ID asignacion . valor
    (17) instruccion -> ID asignacion . instruccion
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    VAR             shift and go to state 5
    ID              shift and go to state 83
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    valor                          shift and go to state 84
    instruccion                    shift and go to state 85
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 40

    (18) instruccion -> ID operador_matematico .

    $end            reduce using rule 18 (instruccion -> ID operador_matematico .)
    PUNTO_COMA      reduce using rule 18 (instruccion -> ID operador_matematico .)
    D_LLAVE         reduce using rule 18 (instruccion -> ID operador_matematico .)
    VAR             reduce using rule 18 (instruccion -> ID operador_matematico .)
    ID              reduce using rule 18 (instruccion -> ID operador_matematico .)
    IF              reduce using rule 18 (instruccion -> ID operador_matematico .)
    ELSE            reduce using rule 18 (instruccion -> ID operador_matematico .)
    ELSEIF          reduce using rule 18 (instruccion -> ID operador_matematico .)
    FOR             reduce using rule 18 (instruccion -> ID operador_matematico .)
    MAP             reduce using rule 18 (instruccion -> ID operador_matematico .)
    MAKE            reduce using rule 18 (instruccion -> ID operador_matematico .)
    TYPE            reduce using rule 18 (instruccion -> ID operador_matematico .)
    PRINTLN         reduce using rule 18 (instruccion -> ID operador_matematico .)
    PRINTF          reduce using rule 18 (instruccion -> ID operador_matematico .)
    PRINT           reduce using rule 18 (instruccion -> ID operador_matematico .)
    I_CORCHETE      reduce using rule 18 (instruccion -> ID operador_matematico .)
    RETURN          reduce using rule 18 (instruccion -> ID operador_matematico .)
    FUNC            reduce using rule 18 (instruccion -> ID operador_matematico .)


state 41

    (72) init_struct -> ID DECLARACION_ASIGNACION . ID I_LLAVE valores D_LLAVE
    (104) asignacion -> DECLARACION_ASIGNACION .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 86
    VAR             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    IF              reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    ELSE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    ELSEIF          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    FOR             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    MAP             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    MAKE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    TYPE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    INT             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    DOUBLE          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    STRING          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    BOOLEAN         reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTLN         reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTF          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINT           reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    I_CORCHETE      reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)

  ! ID              [ reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .) ]


state 42

    (100) asignacion -> ASIGNACION .

    VAR             reduce using rule 100 (asignacion -> ASIGNACION .)
    ID              reduce using rule 100 (asignacion -> ASIGNACION .)
    IF              reduce using rule 100 (asignacion -> ASIGNACION .)
    ELSE            reduce using rule 100 (asignacion -> ASIGNACION .)
    ELSEIF          reduce using rule 100 (asignacion -> ASIGNACION .)
    FOR             reduce using rule 100 (asignacion -> ASIGNACION .)
    MAP             reduce using rule 100 (asignacion -> ASIGNACION .)
    MAKE            reduce using rule 100 (asignacion -> ASIGNACION .)
    TYPE            reduce using rule 100 (asignacion -> ASIGNACION .)
    INT             reduce using rule 100 (asignacion -> ASIGNACION .)
    DOUBLE          reduce using rule 100 (asignacion -> ASIGNACION .)
    STRING          reduce using rule 100 (asignacion -> ASIGNACION .)
    BOOLEAN         reduce using rule 100 (asignacion -> ASIGNACION .)
    PRINTLN         reduce using rule 100 (asignacion -> ASIGNACION .)
    PRINTF          reduce using rule 100 (asignacion -> ASIGNACION .)
    PRINT           reduce using rule 100 (asignacion -> ASIGNACION .)
    I_CORCHETE      reduce using rule 100 (asignacion -> ASIGNACION .)


state 43

    (101) asignacion -> ASIGNACION_ADICION .

    VAR             reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    ID              reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    IF              reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    ELSE            reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    ELSEIF          reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    FOR             reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    MAP             reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    MAKE            reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    TYPE            reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    INT             reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    DOUBLE          reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    STRING          reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    BOOLEAN         reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    PRINTLN         reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    PRINTF          reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    PRINT           reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)
    I_CORCHETE      reduce using rule 101 (asignacion -> ASIGNACION_ADICION .)


state 44

    (102) asignacion -> ASIGNACION_RESTA .

    VAR             reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    ID              reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    IF              reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    ELSE            reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    ELSEIF          reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    FOR             reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    MAP             reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    MAKE            reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    TYPE            reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    INT             reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    DOUBLE          reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    STRING          reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    BOOLEAN         reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    PRINTLN         reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    PRINTF          reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    PRINT           reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)
    I_CORCHETE      reduce using rule 102 (asignacion -> ASIGNACION_RESTA .)


state 45

    (103) asignacion -> ASIGNACION_MULTI .

    VAR             reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    ID              reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    IF              reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    ELSE            reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    ELSEIF          reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    FOR             reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    MAP             reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    MAKE            reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    TYPE            reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    INT             reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    DOUBLE          reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    STRING          reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    BOOLEAN         reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    PRINTLN         reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    PRINTF          reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    PRINT           reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)
    I_CORCHETE      reduce using rule 103 (asignacion -> ASIGNACION_MULTI .)


state 46

    (105) asignacion -> ASIGNACION_DIVISION .

    VAR             reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    ID              reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    IF              reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    ELSE            reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    ELSEIF          reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    FOR             reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    MAP             reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    MAKE            reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    TYPE            reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    INT             reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    DOUBLE          reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    STRING          reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    BOOLEAN         reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    PRINTLN         reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    PRINTF          reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    PRINT           reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)
    I_CORCHETE      reduce using rule 105 (asignacion -> ASIGNACION_DIVISION .)


state 47

    (106) asignacion -> ASIGNACION_MODULO .

    VAR             reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    ID              reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    IF              reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    ELSE            reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    ELSEIF          reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    FOR             reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    MAP             reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    MAKE            reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    TYPE            reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    INT             reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    DOUBLE          reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    STRING          reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    BOOLEAN         reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    PRINTLN         reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    PRINTF          reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    PRINT           reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)
    I_CORCHETE      reduce using rule 106 (asignacion -> ASIGNACION_MODULO .)


state 48

    (98) operador_matematico -> INCREMENTO .

    $end            reduce using rule 98 (operador_matematico -> INCREMENTO .)
    D_LLAVE         reduce using rule 98 (operador_matematico -> INCREMENTO .)
    VAR             reduce using rule 98 (operador_matematico -> INCREMENTO .)
    ID              reduce using rule 98 (operador_matematico -> INCREMENTO .)
    IF              reduce using rule 98 (operador_matematico -> INCREMENTO .)
    ELSE            reduce using rule 98 (operador_matematico -> INCREMENTO .)
    ELSEIF          reduce using rule 98 (operador_matematico -> INCREMENTO .)
    FOR             reduce using rule 98 (operador_matematico -> INCREMENTO .)
    MAP             reduce using rule 98 (operador_matematico -> INCREMENTO .)
    MAKE            reduce using rule 98 (operador_matematico -> INCREMENTO .)
    TYPE            reduce using rule 98 (operador_matematico -> INCREMENTO .)
    PRINTLN         reduce using rule 98 (operador_matematico -> INCREMENTO .)
    PRINTF          reduce using rule 98 (operador_matematico -> INCREMENTO .)
    PRINT           reduce using rule 98 (operador_matematico -> INCREMENTO .)
    I_CORCHETE      reduce using rule 98 (operador_matematico -> INCREMENTO .)
    RETURN          reduce using rule 98 (operador_matematico -> INCREMENTO .)
    FUNC            reduce using rule 98 (operador_matematico -> INCREMENTO .)
    PUNTO_COMA      reduce using rule 98 (operador_matematico -> INCREMENTO .)
    I_LLAVE         reduce using rule 98 (operador_matematico -> INCREMENTO .)


state 49

    (99) operador_matematico -> DECREMENTO .

    $end            reduce using rule 99 (operador_matematico -> DECREMENTO .)
    D_LLAVE         reduce using rule 99 (operador_matematico -> DECREMENTO .)
    VAR             reduce using rule 99 (operador_matematico -> DECREMENTO .)
    ID              reduce using rule 99 (operador_matematico -> DECREMENTO .)
    IF              reduce using rule 99 (operador_matematico -> DECREMENTO .)
    ELSE            reduce using rule 99 (operador_matematico -> DECREMENTO .)
    ELSEIF          reduce using rule 99 (operador_matematico -> DECREMENTO .)
    FOR             reduce using rule 99 (operador_matematico -> DECREMENTO .)
    MAP             reduce using rule 99 (operador_matematico -> DECREMENTO .)
    MAKE            reduce using rule 99 (operador_matematico -> DECREMENTO .)
    TYPE            reduce using rule 99 (operador_matematico -> DECREMENTO .)
    PRINTLN         reduce using rule 99 (operador_matematico -> DECREMENTO .)
    PRINTF          reduce using rule 99 (operador_matematico -> DECREMENTO .)
    PRINT           reduce using rule 99 (operador_matematico -> DECREMENTO .)
    I_CORCHETE      reduce using rule 99 (operador_matematico -> DECREMENTO .)
    RETURN          reduce using rule 99 (operador_matematico -> DECREMENTO .)
    FUNC            reduce using rule 99 (operador_matematico -> DECREMENTO .)
    PUNTO_COMA      reduce using rule 99 (operador_matematico -> DECREMENTO .)
    I_LLAVE         reduce using rule 99 (operador_matematico -> DECREMENTO .)


state 50

    (25) instruccion -> IF condicion . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 87


state 51

    (76) condicion -> valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    I_LLAVE         reduce using rule 76 (condicion -> valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 52

    (77) condicion -> I_PARENTESIS . valor D_PARENTESIS
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 100
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 53

    (118) valor -> valor_int .

    ADICION         reduce using rule 118 (valor -> valor_int .)
    RESTA           reduce using rule 118 (valor -> valor_int .)
    MULTIPLICACION  reduce using rule 118 (valor -> valor_int .)
    DIVISION        reduce using rule 118 (valor -> valor_int .)
    MODULO          reduce using rule 118 (valor -> valor_int .)
    MENOR_IGUAL     reduce using rule 118 (valor -> valor_int .)
    IGUAL           reduce using rule 118 (valor -> valor_int .)
    DIFERENTE       reduce using rule 118 (valor -> valor_int .)
    MAYOR           reduce using rule 118 (valor -> valor_int .)
    MAYOR_IGUAL     reduce using rule 118 (valor -> valor_int .)
    MENOR           reduce using rule 118 (valor -> valor_int .)
    I_LLAVE         reduce using rule 118 (valor -> valor_int .)
    COMA            reduce using rule 118 (valor -> valor_int .)
    D_PARENTESIS    reduce using rule 118 (valor -> valor_int .)
    $end            reduce using rule 118 (valor -> valor_int .)
    PUNTO_COMA      reduce using rule 118 (valor -> valor_int .)
    D_LLAVE         reduce using rule 118 (valor -> valor_int .)
    VAR             reduce using rule 118 (valor -> valor_int .)
    ID              reduce using rule 118 (valor -> valor_int .)
    IF              reduce using rule 118 (valor -> valor_int .)
    ELSE            reduce using rule 118 (valor -> valor_int .)
    ELSEIF          reduce using rule 118 (valor -> valor_int .)
    FOR             reduce using rule 118 (valor -> valor_int .)
    MAP             reduce using rule 118 (valor -> valor_int .)
    MAKE            reduce using rule 118 (valor -> valor_int .)
    TYPE            reduce using rule 118 (valor -> valor_int .)
    PRINTLN         reduce using rule 118 (valor -> valor_int .)
    PRINTF          reduce using rule 118 (valor -> valor_int .)
    PRINT           reduce using rule 118 (valor -> valor_int .)
    I_CORCHETE      reduce using rule 118 (valor -> valor_int .)
    RETURN          reduce using rule 118 (valor -> valor_int .)
    FUNC            reduce using rule 118 (valor -> valor_int .)
    DOS_PUNTOS      reduce using rule 118 (valor -> valor_int .)


state 54

    (119) valor -> valor_double .

    ADICION         reduce using rule 119 (valor -> valor_double .)
    RESTA           reduce using rule 119 (valor -> valor_double .)
    MULTIPLICACION  reduce using rule 119 (valor -> valor_double .)
    DIVISION        reduce using rule 119 (valor -> valor_double .)
    MODULO          reduce using rule 119 (valor -> valor_double .)
    MENOR_IGUAL     reduce using rule 119 (valor -> valor_double .)
    IGUAL           reduce using rule 119 (valor -> valor_double .)
    DIFERENTE       reduce using rule 119 (valor -> valor_double .)
    MAYOR           reduce using rule 119 (valor -> valor_double .)
    MAYOR_IGUAL     reduce using rule 119 (valor -> valor_double .)
    MENOR           reduce using rule 119 (valor -> valor_double .)
    I_LLAVE         reduce using rule 119 (valor -> valor_double .)
    COMA            reduce using rule 119 (valor -> valor_double .)
    D_PARENTESIS    reduce using rule 119 (valor -> valor_double .)
    $end            reduce using rule 119 (valor -> valor_double .)
    PUNTO_COMA      reduce using rule 119 (valor -> valor_double .)
    D_LLAVE         reduce using rule 119 (valor -> valor_double .)
    VAR             reduce using rule 119 (valor -> valor_double .)
    ID              reduce using rule 119 (valor -> valor_double .)
    IF              reduce using rule 119 (valor -> valor_double .)
    ELSE            reduce using rule 119 (valor -> valor_double .)
    ELSEIF          reduce using rule 119 (valor -> valor_double .)
    FOR             reduce using rule 119 (valor -> valor_double .)
    MAP             reduce using rule 119 (valor -> valor_double .)
    MAKE            reduce using rule 119 (valor -> valor_double .)
    TYPE            reduce using rule 119 (valor -> valor_double .)
    PRINTLN         reduce using rule 119 (valor -> valor_double .)
    PRINTF          reduce using rule 119 (valor -> valor_double .)
    PRINT           reduce using rule 119 (valor -> valor_double .)
    I_CORCHETE      reduce using rule 119 (valor -> valor_double .)
    RETURN          reduce using rule 119 (valor -> valor_double .)
    FUNC            reduce using rule 119 (valor -> valor_double .)
    DOS_PUNTOS      reduce using rule 119 (valor -> valor_double .)


state 55

    (120) valor -> valor_string .

    ADICION         reduce using rule 120 (valor -> valor_string .)
    RESTA           reduce using rule 120 (valor -> valor_string .)
    MULTIPLICACION  reduce using rule 120 (valor -> valor_string .)
    DIVISION        reduce using rule 120 (valor -> valor_string .)
    MODULO          reduce using rule 120 (valor -> valor_string .)
    MENOR_IGUAL     reduce using rule 120 (valor -> valor_string .)
    IGUAL           reduce using rule 120 (valor -> valor_string .)
    DIFERENTE       reduce using rule 120 (valor -> valor_string .)
    MAYOR           reduce using rule 120 (valor -> valor_string .)
    MAYOR_IGUAL     reduce using rule 120 (valor -> valor_string .)
    MENOR           reduce using rule 120 (valor -> valor_string .)
    I_LLAVE         reduce using rule 120 (valor -> valor_string .)
    COMA            reduce using rule 120 (valor -> valor_string .)
    D_PARENTESIS    reduce using rule 120 (valor -> valor_string .)
    $end            reduce using rule 120 (valor -> valor_string .)
    PUNTO_COMA      reduce using rule 120 (valor -> valor_string .)
    D_LLAVE         reduce using rule 120 (valor -> valor_string .)
    VAR             reduce using rule 120 (valor -> valor_string .)
    ID              reduce using rule 120 (valor -> valor_string .)
    IF              reduce using rule 120 (valor -> valor_string .)
    ELSE            reduce using rule 120 (valor -> valor_string .)
    ELSEIF          reduce using rule 120 (valor -> valor_string .)
    FOR             reduce using rule 120 (valor -> valor_string .)
    MAP             reduce using rule 120 (valor -> valor_string .)
    MAKE            reduce using rule 120 (valor -> valor_string .)
    TYPE            reduce using rule 120 (valor -> valor_string .)
    PRINTLN         reduce using rule 120 (valor -> valor_string .)
    PRINTF          reduce using rule 120 (valor -> valor_string .)
    PRINT           reduce using rule 120 (valor -> valor_string .)
    I_CORCHETE      reduce using rule 120 (valor -> valor_string .)
    RETURN          reduce using rule 120 (valor -> valor_string .)
    FUNC            reduce using rule 120 (valor -> valor_string .)
    DOS_PUNTOS      reduce using rule 120 (valor -> valor_string .)


state 56

    (121) valor -> valor_boolean .

    ADICION         reduce using rule 121 (valor -> valor_boolean .)
    RESTA           reduce using rule 121 (valor -> valor_boolean .)
    MULTIPLICACION  reduce using rule 121 (valor -> valor_boolean .)
    DIVISION        reduce using rule 121 (valor -> valor_boolean .)
    MODULO          reduce using rule 121 (valor -> valor_boolean .)
    MENOR_IGUAL     reduce using rule 121 (valor -> valor_boolean .)
    IGUAL           reduce using rule 121 (valor -> valor_boolean .)
    DIFERENTE       reduce using rule 121 (valor -> valor_boolean .)
    MAYOR           reduce using rule 121 (valor -> valor_boolean .)
    MAYOR_IGUAL     reduce using rule 121 (valor -> valor_boolean .)
    MENOR           reduce using rule 121 (valor -> valor_boolean .)
    I_LLAVE         reduce using rule 121 (valor -> valor_boolean .)
    COMA            reduce using rule 121 (valor -> valor_boolean .)
    D_PARENTESIS    reduce using rule 121 (valor -> valor_boolean .)
    $end            reduce using rule 121 (valor -> valor_boolean .)
    PUNTO_COMA      reduce using rule 121 (valor -> valor_boolean .)
    D_LLAVE         reduce using rule 121 (valor -> valor_boolean .)
    VAR             reduce using rule 121 (valor -> valor_boolean .)
    ID              reduce using rule 121 (valor -> valor_boolean .)
    IF              reduce using rule 121 (valor -> valor_boolean .)
    ELSE            reduce using rule 121 (valor -> valor_boolean .)
    ELSEIF          reduce using rule 121 (valor -> valor_boolean .)
    FOR             reduce using rule 121 (valor -> valor_boolean .)
    MAP             reduce using rule 121 (valor -> valor_boolean .)
    MAKE            reduce using rule 121 (valor -> valor_boolean .)
    TYPE            reduce using rule 121 (valor -> valor_boolean .)
    PRINTLN         reduce using rule 121 (valor -> valor_boolean .)
    PRINTF          reduce using rule 121 (valor -> valor_boolean .)
    PRINT           reduce using rule 121 (valor -> valor_boolean .)
    I_CORCHETE      reduce using rule 121 (valor -> valor_boolean .)
    RETURN          reduce using rule 121 (valor -> valor_boolean .)
    FUNC            reduce using rule 121 (valor -> valor_boolean .)
    DOS_PUNTOS      reduce using rule 121 (valor -> valor_boolean .)


state 57

    (122) valor -> valor_variable .

    ADICION         reduce using rule 122 (valor -> valor_variable .)
    RESTA           reduce using rule 122 (valor -> valor_variable .)
    MULTIPLICACION  reduce using rule 122 (valor -> valor_variable .)
    DIVISION        reduce using rule 122 (valor -> valor_variable .)
    MODULO          reduce using rule 122 (valor -> valor_variable .)
    MENOR_IGUAL     reduce using rule 122 (valor -> valor_variable .)
    IGUAL           reduce using rule 122 (valor -> valor_variable .)
    DIFERENTE       reduce using rule 122 (valor -> valor_variable .)
    MAYOR           reduce using rule 122 (valor -> valor_variable .)
    MAYOR_IGUAL     reduce using rule 122 (valor -> valor_variable .)
    MENOR           reduce using rule 122 (valor -> valor_variable .)
    I_LLAVE         reduce using rule 122 (valor -> valor_variable .)
    COMA            reduce using rule 122 (valor -> valor_variable .)
    D_PARENTESIS    reduce using rule 122 (valor -> valor_variable .)
    $end            reduce using rule 122 (valor -> valor_variable .)
    PUNTO_COMA      reduce using rule 122 (valor -> valor_variable .)
    D_LLAVE         reduce using rule 122 (valor -> valor_variable .)
    VAR             reduce using rule 122 (valor -> valor_variable .)
    ID              reduce using rule 122 (valor -> valor_variable .)
    IF              reduce using rule 122 (valor -> valor_variable .)
    ELSE            reduce using rule 122 (valor -> valor_variable .)
    ELSEIF          reduce using rule 122 (valor -> valor_variable .)
    FOR             reduce using rule 122 (valor -> valor_variable .)
    MAP             reduce using rule 122 (valor -> valor_variable .)
    MAKE            reduce using rule 122 (valor -> valor_variable .)
    TYPE            reduce using rule 122 (valor -> valor_variable .)
    PRINTLN         reduce using rule 122 (valor -> valor_variable .)
    PRINTF          reduce using rule 122 (valor -> valor_variable .)
    PRINT           reduce using rule 122 (valor -> valor_variable .)
    I_CORCHETE      reduce using rule 122 (valor -> valor_variable .)
    RETURN          reduce using rule 122 (valor -> valor_variable .)
    FUNC            reduce using rule 122 (valor -> valor_variable .)
    DOS_PUNTOS      reduce using rule 122 (valor -> valor_variable .)


state 58

    (123) valor_int -> INT .

    ADICION         reduce using rule 123 (valor_int -> INT .)
    RESTA           reduce using rule 123 (valor_int -> INT .)
    MULTIPLICACION  reduce using rule 123 (valor_int -> INT .)
    DIVISION        reduce using rule 123 (valor_int -> INT .)
    MODULO          reduce using rule 123 (valor_int -> INT .)
    MENOR_IGUAL     reduce using rule 123 (valor_int -> INT .)
    IGUAL           reduce using rule 123 (valor_int -> INT .)
    DIFERENTE       reduce using rule 123 (valor_int -> INT .)
    MAYOR           reduce using rule 123 (valor_int -> INT .)
    MAYOR_IGUAL     reduce using rule 123 (valor_int -> INT .)
    MENOR           reduce using rule 123 (valor_int -> INT .)
    I_LLAVE         reduce using rule 123 (valor_int -> INT .)
    COMA            reduce using rule 123 (valor_int -> INT .)
    D_PARENTESIS    reduce using rule 123 (valor_int -> INT .)
    $end            reduce using rule 123 (valor_int -> INT .)
    PUNTO_COMA      reduce using rule 123 (valor_int -> INT .)
    D_LLAVE         reduce using rule 123 (valor_int -> INT .)
    VAR             reduce using rule 123 (valor_int -> INT .)
    ID              reduce using rule 123 (valor_int -> INT .)
    IF              reduce using rule 123 (valor_int -> INT .)
    ELSE            reduce using rule 123 (valor_int -> INT .)
    ELSEIF          reduce using rule 123 (valor_int -> INT .)
    FOR             reduce using rule 123 (valor_int -> INT .)
    MAP             reduce using rule 123 (valor_int -> INT .)
    MAKE            reduce using rule 123 (valor_int -> INT .)
    TYPE            reduce using rule 123 (valor_int -> INT .)
    PRINTLN         reduce using rule 123 (valor_int -> INT .)
    PRINTF          reduce using rule 123 (valor_int -> INT .)
    PRINT           reduce using rule 123 (valor_int -> INT .)
    I_CORCHETE      reduce using rule 123 (valor_int -> INT .)
    RETURN          reduce using rule 123 (valor_int -> INT .)
    FUNC            reduce using rule 123 (valor_int -> INT .)
    DOS_PUNTOS      reduce using rule 123 (valor_int -> INT .)


state 59

    (124) valor_double -> DOUBLE .

    ADICION         reduce using rule 124 (valor_double -> DOUBLE .)
    RESTA           reduce using rule 124 (valor_double -> DOUBLE .)
    MULTIPLICACION  reduce using rule 124 (valor_double -> DOUBLE .)
    DIVISION        reduce using rule 124 (valor_double -> DOUBLE .)
    MODULO          reduce using rule 124 (valor_double -> DOUBLE .)
    MENOR_IGUAL     reduce using rule 124 (valor_double -> DOUBLE .)
    IGUAL           reduce using rule 124 (valor_double -> DOUBLE .)
    DIFERENTE       reduce using rule 124 (valor_double -> DOUBLE .)
    MAYOR           reduce using rule 124 (valor_double -> DOUBLE .)
    MAYOR_IGUAL     reduce using rule 124 (valor_double -> DOUBLE .)
    MENOR           reduce using rule 124 (valor_double -> DOUBLE .)
    I_LLAVE         reduce using rule 124 (valor_double -> DOUBLE .)
    COMA            reduce using rule 124 (valor_double -> DOUBLE .)
    D_PARENTESIS    reduce using rule 124 (valor_double -> DOUBLE .)
    $end            reduce using rule 124 (valor_double -> DOUBLE .)
    PUNTO_COMA      reduce using rule 124 (valor_double -> DOUBLE .)
    D_LLAVE         reduce using rule 124 (valor_double -> DOUBLE .)
    VAR             reduce using rule 124 (valor_double -> DOUBLE .)
    ID              reduce using rule 124 (valor_double -> DOUBLE .)
    IF              reduce using rule 124 (valor_double -> DOUBLE .)
    ELSE            reduce using rule 124 (valor_double -> DOUBLE .)
    ELSEIF          reduce using rule 124 (valor_double -> DOUBLE .)
    FOR             reduce using rule 124 (valor_double -> DOUBLE .)
    MAP             reduce using rule 124 (valor_double -> DOUBLE .)
    MAKE            reduce using rule 124 (valor_double -> DOUBLE .)
    TYPE            reduce using rule 124 (valor_double -> DOUBLE .)
    PRINTLN         reduce using rule 124 (valor_double -> DOUBLE .)
    PRINTF          reduce using rule 124 (valor_double -> DOUBLE .)
    PRINT           reduce using rule 124 (valor_double -> DOUBLE .)
    I_CORCHETE      reduce using rule 124 (valor_double -> DOUBLE .)
    RETURN          reduce using rule 124 (valor_double -> DOUBLE .)
    FUNC            reduce using rule 124 (valor_double -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 124 (valor_double -> DOUBLE .)


state 60

    (125) valor_string -> STRING .

    ADICION         reduce using rule 125 (valor_string -> STRING .)
    RESTA           reduce using rule 125 (valor_string -> STRING .)
    MULTIPLICACION  reduce using rule 125 (valor_string -> STRING .)
    DIVISION        reduce using rule 125 (valor_string -> STRING .)
    MODULO          reduce using rule 125 (valor_string -> STRING .)
    MENOR_IGUAL     reduce using rule 125 (valor_string -> STRING .)
    IGUAL           reduce using rule 125 (valor_string -> STRING .)
    DIFERENTE       reduce using rule 125 (valor_string -> STRING .)
    MAYOR           reduce using rule 125 (valor_string -> STRING .)
    MAYOR_IGUAL     reduce using rule 125 (valor_string -> STRING .)
    MENOR           reduce using rule 125 (valor_string -> STRING .)
    I_LLAVE         reduce using rule 125 (valor_string -> STRING .)
    COMA            reduce using rule 125 (valor_string -> STRING .)
    D_PARENTESIS    reduce using rule 125 (valor_string -> STRING .)
    $end            reduce using rule 125 (valor_string -> STRING .)
    PUNTO_COMA      reduce using rule 125 (valor_string -> STRING .)
    D_LLAVE         reduce using rule 125 (valor_string -> STRING .)
    VAR             reduce using rule 125 (valor_string -> STRING .)
    ID              reduce using rule 125 (valor_string -> STRING .)
    IF              reduce using rule 125 (valor_string -> STRING .)
    ELSE            reduce using rule 125 (valor_string -> STRING .)
    ELSEIF          reduce using rule 125 (valor_string -> STRING .)
    FOR             reduce using rule 125 (valor_string -> STRING .)
    MAP             reduce using rule 125 (valor_string -> STRING .)
    MAKE            reduce using rule 125 (valor_string -> STRING .)
    TYPE            reduce using rule 125 (valor_string -> STRING .)
    PRINTLN         reduce using rule 125 (valor_string -> STRING .)
    PRINTF          reduce using rule 125 (valor_string -> STRING .)
    PRINT           reduce using rule 125 (valor_string -> STRING .)
    I_CORCHETE      reduce using rule 125 (valor_string -> STRING .)
    RETURN          reduce using rule 125 (valor_string -> STRING .)
    FUNC            reduce using rule 125 (valor_string -> STRING .)
    DOS_PUNTOS      reduce using rule 125 (valor_string -> STRING .)


state 61

    (126) valor_boolean -> BOOLEAN .

    ADICION         reduce using rule 126 (valor_boolean -> BOOLEAN .)
    RESTA           reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MULTIPLICACION  reduce using rule 126 (valor_boolean -> BOOLEAN .)
    DIVISION        reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MODULO          reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MENOR_IGUAL     reduce using rule 126 (valor_boolean -> BOOLEAN .)
    IGUAL           reduce using rule 126 (valor_boolean -> BOOLEAN .)
    DIFERENTE       reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MAYOR           reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MAYOR_IGUAL     reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MENOR           reduce using rule 126 (valor_boolean -> BOOLEAN .)
    I_LLAVE         reduce using rule 126 (valor_boolean -> BOOLEAN .)
    COMA            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    D_PARENTESIS    reduce using rule 126 (valor_boolean -> BOOLEAN .)
    $end            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    PUNTO_COMA      reduce using rule 126 (valor_boolean -> BOOLEAN .)
    D_LLAVE         reduce using rule 126 (valor_boolean -> BOOLEAN .)
    VAR             reduce using rule 126 (valor_boolean -> BOOLEAN .)
    ID              reduce using rule 126 (valor_boolean -> BOOLEAN .)
    IF              reduce using rule 126 (valor_boolean -> BOOLEAN .)
    ELSE            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    ELSEIF          reduce using rule 126 (valor_boolean -> BOOLEAN .)
    FOR             reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MAP             reduce using rule 126 (valor_boolean -> BOOLEAN .)
    MAKE            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    TYPE            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    PRINTLN         reduce using rule 126 (valor_boolean -> BOOLEAN .)
    PRINTF          reduce using rule 126 (valor_boolean -> BOOLEAN .)
    PRINT           reduce using rule 126 (valor_boolean -> BOOLEAN .)
    I_CORCHETE      reduce using rule 126 (valor_boolean -> BOOLEAN .)
    RETURN          reduce using rule 126 (valor_boolean -> BOOLEAN .)
    FUNC            reduce using rule 126 (valor_boolean -> BOOLEAN .)
    DOS_PUNTOS      reduce using rule 126 (valor_boolean -> BOOLEAN .)


state 62

    (127) valor_variable -> ID .

    ADICION         reduce using rule 127 (valor_variable -> ID .)
    RESTA           reduce using rule 127 (valor_variable -> ID .)
    MULTIPLICACION  reduce using rule 127 (valor_variable -> ID .)
    DIVISION        reduce using rule 127 (valor_variable -> ID .)
    MODULO          reduce using rule 127 (valor_variable -> ID .)
    MENOR_IGUAL     reduce using rule 127 (valor_variable -> ID .)
    IGUAL           reduce using rule 127 (valor_variable -> ID .)
    DIFERENTE       reduce using rule 127 (valor_variable -> ID .)
    MAYOR           reduce using rule 127 (valor_variable -> ID .)
    MAYOR_IGUAL     reduce using rule 127 (valor_variable -> ID .)
    MENOR           reduce using rule 127 (valor_variable -> ID .)
    I_LLAVE         reduce using rule 127 (valor_variable -> ID .)
    COMA            reduce using rule 127 (valor_variable -> ID .)
    D_PARENTESIS    reduce using rule 127 (valor_variable -> ID .)
    $end            reduce using rule 127 (valor_variable -> ID .)
    PUNTO_COMA      reduce using rule 127 (valor_variable -> ID .)
    D_LLAVE         reduce using rule 127 (valor_variable -> ID .)
    VAR             reduce using rule 127 (valor_variable -> ID .)
    ID              reduce using rule 127 (valor_variable -> ID .)
    IF              reduce using rule 127 (valor_variable -> ID .)
    ELSE            reduce using rule 127 (valor_variable -> ID .)
    ELSEIF          reduce using rule 127 (valor_variable -> ID .)
    FOR             reduce using rule 127 (valor_variable -> ID .)
    MAP             reduce using rule 127 (valor_variable -> ID .)
    MAKE            reduce using rule 127 (valor_variable -> ID .)
    TYPE            reduce using rule 127 (valor_variable -> ID .)
    PRINTLN         reduce using rule 127 (valor_variable -> ID .)
    PRINTF          reduce using rule 127 (valor_variable -> ID .)
    PRINT           reduce using rule 127 (valor_variable -> ID .)
    I_CORCHETE      reduce using rule 127 (valor_variable -> ID .)
    RETURN          reduce using rule 127 (valor_variable -> ID .)
    FUNC            reduce using rule 127 (valor_variable -> ID .)
    DOS_PUNTOS      reduce using rule 127 (valor_variable -> ID .)


state 63

    (26) instruccion -> ELSE I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 102
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 64

    (27) instruccion -> ELSEIF condicion . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 104


state 65

    (28) instruccion -> FOR ID . DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (30) instruccion -> FOR ID . COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (16) instruccion -> ID . asignacion valor
    (17) instruccion -> ID . asignacion instruccion
    (18) instruccion -> ID . operador_matematico
    (72) init_struct -> ID . DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE
    (100) asignacion -> . ASIGNACION
    (101) asignacion -> . ASIGNACION_ADICION
    (102) asignacion -> . ASIGNACION_RESTA
    (103) asignacion -> . ASIGNACION_MULTI
    (104) asignacion -> . DECLARACION_ASIGNACION
    (105) asignacion -> . ASIGNACION_DIVISION
    (106) asignacion -> . ASIGNACION_MODULO
    (98) operador_matematico -> . INCREMENTO
    (99) operador_matematico -> . DECREMENTO

    DECLARACION_ASIGNACION shift and go to state 105
    COMA            shift and go to state 106
    ASIGNACION      shift and go to state 42
    ASIGNACION_ADICION shift and go to state 43
    ASIGNACION_RESTA shift and go to state 44
    ASIGNACION_MULTI shift and go to state 45
    ASIGNACION_DIVISION shift and go to state 46
    ASIGNACION_MODULO shift and go to state 47
    INCREMENTO      shift and go to state 48
    DECREMENTO      shift and go to state 49

    asignacion                     shift and go to state 39
    operador_matematico            shift and go to state 40

state 66

    (29) instruccion -> FOR instruccion . PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE

    PUNTO_COMA      shift and go to state 107


state 67

    (63) instruccion -> MAP I_CORCHETE . type D_CORCHETE type I_LLAVE D_LLAVE
    (65) instruccion -> MAP I_CORCHETE . type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 108

state 68

    (47) array_int -> I_CORCHETE D_CORCHETE . INT I_LLAVE D_LLAVE
    (48) array_double -> I_CORCHETE D_CORCHETE . DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> I_CORCHETE D_CORCHETE . STRING I_LLAVE D_LLAVE
    (50) array_boolean -> I_CORCHETE D_CORCHETE . BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> I_CORCHETE D_CORCHETE . INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> I_CORCHETE D_CORCHETE . DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> I_CORCHETE D_CORCHETE . STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> I_CORCHETE D_CORCHETE . BOOLEAN I_LLAVE valores_boolean D_LLAVE

    INT             shift and go to state 109
    DOUBLE          shift and go to state 110
    STRING          shift and go to state 111
    BOOLEAN         shift and go to state 112


state 69

    (51) array_length_int -> I_CORCHETE INT . D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> I_CORCHETE INT . D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> I_CORCHETE INT . D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> I_CORCHETE INT . D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (59) array_length_con_valores_int -> I_CORCHETE INT . D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> I_CORCHETE INT . D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> I_CORCHETE INT . D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> I_CORCHETE INT . D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE

    D_CORCHETE      shift and go to state 113


state 70

    (64) instruccion -> MAKE I_PARENTESIS . MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS

    MAP             shift and go to state 114


state 71

    (66) instruccion -> TYPE ID . STRUCT I_LLAVE atributos_struct D_LLAVE

    STRUCT          shift and go to state 115


state 72

    (19) funcion -> FUNC ID . cuerpo_fun
    (20) cuerpo_fun -> . parametrosMetodo body
    (21) parametrosMetodo -> . I_PARENTESIS parametros D_PARENTESIS type

    I_PARENTESIS    shift and go to state 118

    cuerpo_fun                     shift and go to state 116
    parametrosMetodo               shift and go to state 117

state 73

    (12) instruccion -> print I_PARENTESIS valores . D_PARENTESIS

    D_PARENTESIS    shift and go to state 119


state 74

    (79) valores -> valor .
    (80) valores -> valor . COMA valores
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    D_PARENTESIS    reduce using rule 79 (valores -> valor .)
    D_LLAVE         reduce using rule 79 (valores -> valor .)
    COMA            shift and go to state 120
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 75

    (71) init_struct -> VAR ID ID . ASIGNACION ID I_LLAVE valores D_LLAVE

    ASIGNACION      shift and go to state 121


state 76

    (13) instruccion -> VAR ID type . ASIGNACION valor

    ASIGNACION      shift and go to state 122


state 77

    (14) instruccion -> VAR ID ASIGNACION . valor
    (15) instruccion -> VAR ID ASIGNACION . instruccion
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    VAR             shift and go to state 5
    ID              shift and go to state 83
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    valor                          shift and go to state 123
    instruccion                    shift and go to state 124
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 78

    (93) type -> BOOL .

    ASIGNACION      reduce using rule 93 (type -> BOOL .)
    D_CORCHETE      reduce using rule 93 (type -> BOOL .)
    I_LLAVE         reduce using rule 93 (type -> BOOL .)
    COMA            reduce using rule 93 (type -> BOOL .)
    D_PARENTESIS    reduce using rule 93 (type -> BOOL .)
    ID              reduce using rule 93 (type -> BOOL .)
    D_LLAVE         reduce using rule 93 (type -> BOOL .)
    VAR             reduce using rule 93 (type -> BOOL .)
    IF              reduce using rule 93 (type -> BOOL .)
    ELSE            reduce using rule 93 (type -> BOOL .)
    ELSEIF          reduce using rule 93 (type -> BOOL .)
    FOR             reduce using rule 93 (type -> BOOL .)
    MAP             reduce using rule 93 (type -> BOOL .)
    MAKE            reduce using rule 93 (type -> BOOL .)
    TYPE            reduce using rule 93 (type -> BOOL .)
    PRINTLN         reduce using rule 93 (type -> BOOL .)
    PRINTF          reduce using rule 93 (type -> BOOL .)
    PRINT           reduce using rule 93 (type -> BOOL .)
    I_CORCHETE      reduce using rule 93 (type -> BOOL .)


state 79

    (94) type -> STRINGTYPE .

    ASIGNACION      reduce using rule 94 (type -> STRINGTYPE .)
    D_CORCHETE      reduce using rule 94 (type -> STRINGTYPE .)
    I_LLAVE         reduce using rule 94 (type -> STRINGTYPE .)
    COMA            reduce using rule 94 (type -> STRINGTYPE .)
    D_PARENTESIS    reduce using rule 94 (type -> STRINGTYPE .)
    ID              reduce using rule 94 (type -> STRINGTYPE .)
    D_LLAVE         reduce using rule 94 (type -> STRINGTYPE .)
    VAR             reduce using rule 94 (type -> STRINGTYPE .)
    IF              reduce using rule 94 (type -> STRINGTYPE .)
    ELSE            reduce using rule 94 (type -> STRINGTYPE .)
    ELSEIF          reduce using rule 94 (type -> STRINGTYPE .)
    FOR             reduce using rule 94 (type -> STRINGTYPE .)
    MAP             reduce using rule 94 (type -> STRINGTYPE .)
    MAKE            reduce using rule 94 (type -> STRINGTYPE .)
    TYPE            reduce using rule 94 (type -> STRINGTYPE .)
    PRINTLN         reduce using rule 94 (type -> STRINGTYPE .)
    PRINTF          reduce using rule 94 (type -> STRINGTYPE .)
    PRINT           reduce using rule 94 (type -> STRINGTYPE .)
    I_CORCHETE      reduce using rule 94 (type -> STRINGTYPE .)


state 80

    (95) type -> INTEGER .

    ASIGNACION      reduce using rule 95 (type -> INTEGER .)
    D_CORCHETE      reduce using rule 95 (type -> INTEGER .)
    I_LLAVE         reduce using rule 95 (type -> INTEGER .)
    COMA            reduce using rule 95 (type -> INTEGER .)
    D_PARENTESIS    reduce using rule 95 (type -> INTEGER .)
    ID              reduce using rule 95 (type -> INTEGER .)
    D_LLAVE         reduce using rule 95 (type -> INTEGER .)
    VAR             reduce using rule 95 (type -> INTEGER .)
    IF              reduce using rule 95 (type -> INTEGER .)
    ELSE            reduce using rule 95 (type -> INTEGER .)
    ELSEIF          reduce using rule 95 (type -> INTEGER .)
    FOR             reduce using rule 95 (type -> INTEGER .)
    MAP             reduce using rule 95 (type -> INTEGER .)
    MAKE            reduce using rule 95 (type -> INTEGER .)
    TYPE            reduce using rule 95 (type -> INTEGER .)
    PRINTLN         reduce using rule 95 (type -> INTEGER .)
    PRINTF          reduce using rule 95 (type -> INTEGER .)
    PRINT           reduce using rule 95 (type -> INTEGER .)
    I_CORCHETE      reduce using rule 95 (type -> INTEGER .)


state 81

    (96) type -> FLOAT32 .

    ASIGNACION      reduce using rule 96 (type -> FLOAT32 .)
    D_CORCHETE      reduce using rule 96 (type -> FLOAT32 .)
    I_LLAVE         reduce using rule 96 (type -> FLOAT32 .)
    COMA            reduce using rule 96 (type -> FLOAT32 .)
    D_PARENTESIS    reduce using rule 96 (type -> FLOAT32 .)
    ID              reduce using rule 96 (type -> FLOAT32 .)
    D_LLAVE         reduce using rule 96 (type -> FLOAT32 .)
    VAR             reduce using rule 96 (type -> FLOAT32 .)
    IF              reduce using rule 96 (type -> FLOAT32 .)
    ELSE            reduce using rule 96 (type -> FLOAT32 .)
    ELSEIF          reduce using rule 96 (type -> FLOAT32 .)
    FOR             reduce using rule 96 (type -> FLOAT32 .)
    MAP             reduce using rule 96 (type -> FLOAT32 .)
    MAKE            reduce using rule 96 (type -> FLOAT32 .)
    TYPE            reduce using rule 96 (type -> FLOAT32 .)
    PRINTLN         reduce using rule 96 (type -> FLOAT32 .)
    PRINTF          reduce using rule 96 (type -> FLOAT32 .)
    PRINT           reduce using rule 96 (type -> FLOAT32 .)
    I_CORCHETE      reduce using rule 96 (type -> FLOAT32 .)


state 82

    (97) type -> FLOAT64 .

    ASIGNACION      reduce using rule 97 (type -> FLOAT64 .)
    D_CORCHETE      reduce using rule 97 (type -> FLOAT64 .)
    I_LLAVE         reduce using rule 97 (type -> FLOAT64 .)
    COMA            reduce using rule 97 (type -> FLOAT64 .)
    D_PARENTESIS    reduce using rule 97 (type -> FLOAT64 .)
    ID              reduce using rule 97 (type -> FLOAT64 .)
    D_LLAVE         reduce using rule 97 (type -> FLOAT64 .)
    VAR             reduce using rule 97 (type -> FLOAT64 .)
    IF              reduce using rule 97 (type -> FLOAT64 .)
    ELSE            reduce using rule 97 (type -> FLOAT64 .)
    ELSEIF          reduce using rule 97 (type -> FLOAT64 .)
    FOR             reduce using rule 97 (type -> FLOAT64 .)
    MAP             reduce using rule 97 (type -> FLOAT64 .)
    MAKE            reduce using rule 97 (type -> FLOAT64 .)
    TYPE            reduce using rule 97 (type -> FLOAT64 .)
    PRINTLN         reduce using rule 97 (type -> FLOAT64 .)
    PRINTF          reduce using rule 97 (type -> FLOAT64 .)
    PRINT           reduce using rule 97 (type -> FLOAT64 .)
    I_CORCHETE      reduce using rule 97 (type -> FLOAT64 .)


state 83

    (16) instruccion -> ID . asignacion valor
    (17) instruccion -> ID . asignacion instruccion
    (18) instruccion -> ID . operador_matematico
    (127) valor_variable -> ID .
    (72) init_struct -> ID . DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE
    (100) asignacion -> . ASIGNACION
    (101) asignacion -> . ASIGNACION_ADICION
    (102) asignacion -> . ASIGNACION_RESTA
    (103) asignacion -> . ASIGNACION_MULTI
    (104) asignacion -> . DECLARACION_ASIGNACION
    (105) asignacion -> . ASIGNACION_DIVISION
    (106) asignacion -> . ASIGNACION_MODULO
    (98) operador_matematico -> . INCREMENTO
    (99) operador_matematico -> . DECREMENTO

    ADICION         reduce using rule 127 (valor_variable -> ID .)
    RESTA           reduce using rule 127 (valor_variable -> ID .)
    MULTIPLICACION  reduce using rule 127 (valor_variable -> ID .)
    DIVISION        reduce using rule 127 (valor_variable -> ID .)
    MODULO          reduce using rule 127 (valor_variable -> ID .)
    MENOR_IGUAL     reduce using rule 127 (valor_variable -> ID .)
    IGUAL           reduce using rule 127 (valor_variable -> ID .)
    DIFERENTE       reduce using rule 127 (valor_variable -> ID .)
    MAYOR           reduce using rule 127 (valor_variable -> ID .)
    MAYOR_IGUAL     reduce using rule 127 (valor_variable -> ID .)
    MENOR           reduce using rule 127 (valor_variable -> ID .)
    $end            reduce using rule 127 (valor_variable -> ID .)
    PUNTO_COMA      reduce using rule 127 (valor_variable -> ID .)
    D_LLAVE         reduce using rule 127 (valor_variable -> ID .)
    VAR             reduce using rule 127 (valor_variable -> ID .)
    ID              reduce using rule 127 (valor_variable -> ID .)
    IF              reduce using rule 127 (valor_variable -> ID .)
    ELSE            reduce using rule 127 (valor_variable -> ID .)
    ELSEIF          reduce using rule 127 (valor_variable -> ID .)
    FOR             reduce using rule 127 (valor_variable -> ID .)
    MAP             reduce using rule 127 (valor_variable -> ID .)
    MAKE            reduce using rule 127 (valor_variable -> ID .)
    TYPE            reduce using rule 127 (valor_variable -> ID .)
    PRINTLN         reduce using rule 127 (valor_variable -> ID .)
    PRINTF          reduce using rule 127 (valor_variable -> ID .)
    PRINT           reduce using rule 127 (valor_variable -> ID .)
    I_CORCHETE      reduce using rule 127 (valor_variable -> ID .)
    RETURN          reduce using rule 127 (valor_variable -> ID .)
    FUNC            reduce using rule 127 (valor_variable -> ID .)
    DECLARACION_ASIGNACION shift and go to state 41
    ASIGNACION      shift and go to state 42
    ASIGNACION_ADICION shift and go to state 43
    ASIGNACION_RESTA shift and go to state 44
    ASIGNACION_MULTI shift and go to state 45
    ASIGNACION_DIVISION shift and go to state 46
    ASIGNACION_MODULO shift and go to state 47
    INCREMENTO      shift and go to state 48
    DECREMENTO      shift and go to state 49

    asignacion                     shift and go to state 39
    operador_matematico            shift and go to state 40

state 84

    (16) instruccion -> ID asignacion valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    $end            reduce using rule 16 (instruccion -> ID asignacion valor .)
    PUNTO_COMA      reduce using rule 16 (instruccion -> ID asignacion valor .)
    D_LLAVE         reduce using rule 16 (instruccion -> ID asignacion valor .)
    VAR             reduce using rule 16 (instruccion -> ID asignacion valor .)
    ID              reduce using rule 16 (instruccion -> ID asignacion valor .)
    IF              reduce using rule 16 (instruccion -> ID asignacion valor .)
    ELSE            reduce using rule 16 (instruccion -> ID asignacion valor .)
    ELSEIF          reduce using rule 16 (instruccion -> ID asignacion valor .)
    FOR             reduce using rule 16 (instruccion -> ID asignacion valor .)
    MAP             reduce using rule 16 (instruccion -> ID asignacion valor .)
    MAKE            reduce using rule 16 (instruccion -> ID asignacion valor .)
    TYPE            reduce using rule 16 (instruccion -> ID asignacion valor .)
    PRINTLN         reduce using rule 16 (instruccion -> ID asignacion valor .)
    PRINTF          reduce using rule 16 (instruccion -> ID asignacion valor .)
    PRINT           reduce using rule 16 (instruccion -> ID asignacion valor .)
    I_CORCHETE      reduce using rule 16 (instruccion -> ID asignacion valor .)
    RETURN          reduce using rule 16 (instruccion -> ID asignacion valor .)
    FUNC            reduce using rule 16 (instruccion -> ID asignacion valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 85

    (17) instruccion -> ID asignacion instruccion .

    $end            reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    PUNTO_COMA      reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    D_LLAVE         reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    VAR             reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    ID              reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    IF              reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    ELSE            reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    ELSEIF          reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    FOR             reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    MAP             reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    MAKE            reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    TYPE            reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    PRINTLN         reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    PRINTF          reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    PRINT           reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    I_CORCHETE      reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    RETURN          reduce using rule 17 (instruccion -> ID asignacion instruccion .)
    FUNC            reduce using rule 17 (instruccion -> ID asignacion instruccion .)


state 86

    (72) init_struct -> ID DECLARACION_ASIGNACION ID . I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 125


state 87

    (25) instruccion -> IF condicion I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 126
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 88

    (89) valor -> valor operacion_binaria . valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 127
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 89

    (107) operacion_binaria -> ADICION .

    INT             reduce using rule 107 (operacion_binaria -> ADICION .)
    DOUBLE          reduce using rule 107 (operacion_binaria -> ADICION .)
    STRING          reduce using rule 107 (operacion_binaria -> ADICION .)
    BOOLEAN         reduce using rule 107 (operacion_binaria -> ADICION .)
    ID              reduce using rule 107 (operacion_binaria -> ADICION .)


state 90

    (108) operacion_binaria -> RESTA .

    INT             reduce using rule 108 (operacion_binaria -> RESTA .)
    DOUBLE          reduce using rule 108 (operacion_binaria -> RESTA .)
    STRING          reduce using rule 108 (operacion_binaria -> RESTA .)
    BOOLEAN         reduce using rule 108 (operacion_binaria -> RESTA .)
    ID              reduce using rule 108 (operacion_binaria -> RESTA .)


state 91

    (109) operacion_binaria -> MULTIPLICACION .

    INT             reduce using rule 109 (operacion_binaria -> MULTIPLICACION .)
    DOUBLE          reduce using rule 109 (operacion_binaria -> MULTIPLICACION .)
    STRING          reduce using rule 109 (operacion_binaria -> MULTIPLICACION .)
    BOOLEAN         reduce using rule 109 (operacion_binaria -> MULTIPLICACION .)
    ID              reduce using rule 109 (operacion_binaria -> MULTIPLICACION .)


state 92

    (110) operacion_binaria -> DIVISION .

    INT             reduce using rule 110 (operacion_binaria -> DIVISION .)
    DOUBLE          reduce using rule 110 (operacion_binaria -> DIVISION .)
    STRING          reduce using rule 110 (operacion_binaria -> DIVISION .)
    BOOLEAN         reduce using rule 110 (operacion_binaria -> DIVISION .)
    ID              reduce using rule 110 (operacion_binaria -> DIVISION .)


state 93

    (111) operacion_binaria -> MODULO .

    INT             reduce using rule 111 (operacion_binaria -> MODULO .)
    DOUBLE          reduce using rule 111 (operacion_binaria -> MODULO .)
    STRING          reduce using rule 111 (operacion_binaria -> MODULO .)
    BOOLEAN         reduce using rule 111 (operacion_binaria -> MODULO .)
    ID              reduce using rule 111 (operacion_binaria -> MODULO .)


state 94

    (112) operacion_binaria -> MENOR_IGUAL .

    INT             reduce using rule 112 (operacion_binaria -> MENOR_IGUAL .)
    DOUBLE          reduce using rule 112 (operacion_binaria -> MENOR_IGUAL .)
    STRING          reduce using rule 112 (operacion_binaria -> MENOR_IGUAL .)
    BOOLEAN         reduce using rule 112 (operacion_binaria -> MENOR_IGUAL .)
    ID              reduce using rule 112 (operacion_binaria -> MENOR_IGUAL .)


state 95

    (113) operacion_binaria -> IGUAL .

    INT             reduce using rule 113 (operacion_binaria -> IGUAL .)
    DOUBLE          reduce using rule 113 (operacion_binaria -> IGUAL .)
    STRING          reduce using rule 113 (operacion_binaria -> IGUAL .)
    BOOLEAN         reduce using rule 113 (operacion_binaria -> IGUAL .)
    ID              reduce using rule 113 (operacion_binaria -> IGUAL .)


state 96

    (114) operacion_binaria -> DIFERENTE .

    INT             reduce using rule 114 (operacion_binaria -> DIFERENTE .)
    DOUBLE          reduce using rule 114 (operacion_binaria -> DIFERENTE .)
    STRING          reduce using rule 114 (operacion_binaria -> DIFERENTE .)
    BOOLEAN         reduce using rule 114 (operacion_binaria -> DIFERENTE .)
    ID              reduce using rule 114 (operacion_binaria -> DIFERENTE .)


state 97

    (115) operacion_binaria -> MAYOR .

    INT             reduce using rule 115 (operacion_binaria -> MAYOR .)
    DOUBLE          reduce using rule 115 (operacion_binaria -> MAYOR .)
    STRING          reduce using rule 115 (operacion_binaria -> MAYOR .)
    BOOLEAN         reduce using rule 115 (operacion_binaria -> MAYOR .)
    ID              reduce using rule 115 (operacion_binaria -> MAYOR .)


state 98

    (116) operacion_binaria -> MAYOR_IGUAL .

    INT             reduce using rule 116 (operacion_binaria -> MAYOR_IGUAL .)
    DOUBLE          reduce using rule 116 (operacion_binaria -> MAYOR_IGUAL .)
    STRING          reduce using rule 116 (operacion_binaria -> MAYOR_IGUAL .)
    BOOLEAN         reduce using rule 116 (operacion_binaria -> MAYOR_IGUAL .)
    ID              reduce using rule 116 (operacion_binaria -> MAYOR_IGUAL .)


state 99

    (117) operacion_binaria -> MENOR .

    INT             reduce using rule 117 (operacion_binaria -> MENOR .)
    DOUBLE          reduce using rule 117 (operacion_binaria -> MENOR .)
    STRING          reduce using rule 117 (operacion_binaria -> MENOR .)
    BOOLEAN         reduce using rule 117 (operacion_binaria -> MENOR .)
    ID              reduce using rule 117 (operacion_binaria -> MENOR .)


state 100

    (77) condicion -> I_PARENTESIS valor . D_PARENTESIS
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    D_PARENTESIS    shift and go to state 128
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 101

    (5) body -> I_LLAVE . instruct_expression D_LLAVE
    (6) body -> I_LLAVE . varias_instrucciones
    (7) body -> I_LLAVE . varias_instrucciones instruct_expression D_LLAVE
    (8) body -> I_LLAVE . D_LLAVE
    (11) instruct_expression -> . RETURN valor
    (9) varias_instrucciones -> . instruccion
    (10) varias_instrucciones -> . instruccion varias_instrucciones
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    D_LLAVE         shift and go to state 130
    RETURN          shift and go to state 132
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    instruct_expression            shift and go to state 129
    varias_instrucciones           shift and go to state 131
    instruccion                    shift and go to state 133
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 102

    (26) instruccion -> ELSE I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 134


state 103

    (4) body -> instruccion .

    D_LLAVE         reduce using rule 4 (body -> instruccion .)
    VAR             reduce using rule 4 (body -> instruccion .)
    ID              reduce using rule 4 (body -> instruccion .)
    IF              reduce using rule 4 (body -> instruccion .)
    ELSE            reduce using rule 4 (body -> instruccion .)
    ELSEIF          reduce using rule 4 (body -> instruccion .)
    FOR             reduce using rule 4 (body -> instruccion .)
    MAP             reduce using rule 4 (body -> instruccion .)
    MAKE            reduce using rule 4 (body -> instruccion .)
    TYPE            reduce using rule 4 (body -> instruccion .)
    FUNC            reduce using rule 4 (body -> instruccion .)
    PRINTLN         reduce using rule 4 (body -> instruccion .)
    PRINTF          reduce using rule 4 (body -> instruccion .)
    PRINT           reduce using rule 4 (body -> instruccion .)
    I_CORCHETE      reduce using rule 4 (body -> instruccion .)
    $end            reduce using rule 4 (body -> instruccion .)


state 104

    (27) instruccion -> ELSEIF condicion I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 135
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 105

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION . RANGE ID I_LLAVE body D_LLAVE
    (72) init_struct -> ID DECLARACION_ASIGNACION . ID I_LLAVE valores D_LLAVE
    (104) asignacion -> DECLARACION_ASIGNACION .

  ! shift/reduce conflict for ID resolved as shift
    RANGE           shift and go to state 136
    ID              shift and go to state 86
    VAR             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    IF              reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    ELSE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    ELSEIF          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    FOR             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    MAP             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    MAKE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    TYPE            reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    INT             reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    DOUBLE          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    STRING          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    BOOLEAN         reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTLN         reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINTF          reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    PRINT           reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)
    I_CORCHETE      reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .)

  ! ID              [ reduce using rule 104 (asignacion -> DECLARACION_ASIGNACION .) ]


state 106

    (30) instruccion -> FOR ID COMA . ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE

    ID              shift and go to state 137


state 107

    (29) instruccion -> FOR instruccion PUNTO_COMA . valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 138
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 108

    (63) instruccion -> MAP I_CORCHETE type . D_CORCHETE type I_LLAVE D_LLAVE
    (65) instruccion -> MAP I_CORCHETE type . D_CORCHETE type I_LLAVE claves_valores D_LLAVE

    D_CORCHETE      shift and go to state 139


state 109

    (47) array_int -> I_CORCHETE D_CORCHETE INT . I_LLAVE D_LLAVE
    (55) array_con_valores_int -> I_CORCHETE D_CORCHETE INT . I_LLAVE valores_int D_LLAVE

    I_LLAVE         shift and go to state 140


state 110

    (48) array_double -> I_CORCHETE D_CORCHETE DOUBLE . I_LLAVE D_LLAVE
    (56) array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE . I_LLAVE valores_double D_LLAVE

    I_LLAVE         shift and go to state 141


state 111

    (49) array_string -> I_CORCHETE D_CORCHETE STRING . I_LLAVE D_LLAVE
    (57) array_con_valores_string -> I_CORCHETE D_CORCHETE STRING . I_LLAVE valores_string D_LLAVE

    I_LLAVE         shift and go to state 142


state 112

    (50) array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN . I_LLAVE D_LLAVE
    (58) array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN . I_LLAVE valores_boolean D_LLAVE

    I_LLAVE         shift and go to state 143


state 113

    (51) array_length_int -> I_CORCHETE INT D_CORCHETE . INT I_LLAVE D_LLAVE
    (52) array_length_double -> I_CORCHETE INT D_CORCHETE . DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> I_CORCHETE INT D_CORCHETE . STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> I_CORCHETE INT D_CORCHETE . BOOLEAN I_LLAVE D_LLAVE
    (59) array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE . INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE . DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE . STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE . BOOLEAN I_LLAVE valores_boolean D_LLAVE

    INT             shift and go to state 144
    DOUBLE          shift and go to state 145
    STRING          shift and go to state 146
    BOOLEAN         shift and go to state 147


state 114

    (64) instruccion -> MAKE I_PARENTESIS MAP . I_CORCHETE type D_CORCHETE type D_PARENTESIS

    I_CORCHETE      shift and go to state 148


state 115

    (66) instruccion -> TYPE ID STRUCT . I_LLAVE atributos_struct D_LLAVE

    I_LLAVE         shift and go to state 149


state 116

    (19) funcion -> FUNC ID cuerpo_fun .

    VAR             reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    ID              reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    IF              reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    ELSE            reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    ELSEIF          reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    FOR             reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    MAP             reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    MAKE            reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    TYPE            reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    FUNC            reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    PRINTLN         reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    PRINTF          reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    PRINT           reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    I_CORCHETE      reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)
    $end            reduce using rule 19 (funcion -> FUNC ID cuerpo_fun .)


state 117

    (20) cuerpo_fun -> parametrosMetodo . body
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 150
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 118

    (21) parametrosMetodo -> I_PARENTESIS . parametros D_PARENTESIS type
    (22) parametros -> . atributo
    (23) parametros -> . atributo COMA parametros
    (24) parametros -> .
    (69) atributo -> . ID type

    D_PARENTESIS    reduce using rule 24 (parametros -> .)
    ID              shift and go to state 153

    parametros                     shift and go to state 151
    atributo                       shift and go to state 152

state 119

    (12) instruccion -> print I_PARENTESIS valores D_PARENTESIS .

    $end            reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    PUNTO_COMA      reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    D_LLAVE         reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    VAR             reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    ID              reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    IF              reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    ELSE            reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    ELSEIF          reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    FOR             reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    MAP             reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    MAKE            reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    TYPE            reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    PRINTLN         reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    PRINTF          reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    PRINT           reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    I_CORCHETE      reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    RETURN          reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)
    FUNC            reduce using rule 12 (instruccion -> print I_PARENTESIS valores D_PARENTESIS .)


state 120

    (80) valores -> valor COMA . valores
    (79) valores -> . valor
    (80) valores -> . valor COMA valores
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 74
    valores                        shift and go to state 154
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 121

    (71) init_struct -> VAR ID ID ASIGNACION . ID I_LLAVE valores D_LLAVE

    ID              shift and go to state 155


state 122

    (13) instruccion -> VAR ID type ASIGNACION . valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 156
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 123

    (14) instruccion -> VAR ID ASIGNACION valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    $end            reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    PUNTO_COMA      reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    D_LLAVE         reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    VAR             reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    ID              reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    IF              reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    ELSE            reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    ELSEIF          reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    FOR             reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    MAP             reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    MAKE            reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    TYPE            reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    PRINTLN         reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    PRINTF          reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    PRINT           reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    I_CORCHETE      reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    RETURN          reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    FUNC            reduce using rule 14 (instruccion -> VAR ID ASIGNACION valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 124

    (15) instruccion -> VAR ID ASIGNACION instruccion .

    $end            reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    PUNTO_COMA      reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    D_LLAVE         reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    VAR             reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    ID              reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    IF              reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    ELSE            reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    ELSEIF          reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    FOR             reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    MAP             reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    MAKE            reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    TYPE            reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    PRINTLN         reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    PRINTF          reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    PRINT           reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    I_CORCHETE      reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    RETURN          reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)
    FUNC            reduce using rule 15 (instruccion -> VAR ID ASIGNACION instruccion .)


state 125

    (72) init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE . valores D_LLAVE
    (79) valores -> . valor
    (80) valores -> . valor COMA valores
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valores                        shift and go to state 157
    valor                          shift and go to state 74
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 126

    (25) instruccion -> IF condicion I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 158


state 127

    (89) valor -> valor operacion_binaria valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

  ! shift/reduce conflict for ADICION resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
    I_LLAVE         reduce using rule 89 (valor -> valor operacion_binaria valor .)
    COMA            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    D_PARENTESIS    reduce using rule 89 (valor -> valor operacion_binaria valor .)
    $end            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    PUNTO_COMA      reduce using rule 89 (valor -> valor operacion_binaria valor .)
    D_LLAVE         reduce using rule 89 (valor -> valor operacion_binaria valor .)
    VAR             reduce using rule 89 (valor -> valor operacion_binaria valor .)
    ID              reduce using rule 89 (valor -> valor operacion_binaria valor .)
    IF              reduce using rule 89 (valor -> valor operacion_binaria valor .)
    ELSE            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    ELSEIF          reduce using rule 89 (valor -> valor operacion_binaria valor .)
    FOR             reduce using rule 89 (valor -> valor operacion_binaria valor .)
    MAP             reduce using rule 89 (valor -> valor operacion_binaria valor .)
    MAKE            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    TYPE            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    PRINTLN         reduce using rule 89 (valor -> valor operacion_binaria valor .)
    PRINTF          reduce using rule 89 (valor -> valor operacion_binaria valor .)
    PRINT           reduce using rule 89 (valor -> valor operacion_binaria valor .)
    I_CORCHETE      reduce using rule 89 (valor -> valor operacion_binaria valor .)
    RETURN          reduce using rule 89 (valor -> valor operacion_binaria valor .)
    FUNC            reduce using rule 89 (valor -> valor operacion_binaria valor .)
    DOS_PUNTOS      reduce using rule 89 (valor -> valor operacion_binaria valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

  ! ADICION         [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! RESTA           [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MULTIPLICACION  [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! DIVISION        [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MODULO          [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! IGUAL           [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! DIFERENTE       [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MAYOR           [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]
  ! MENOR           [ reduce using rule 89 (valor -> valor operacion_binaria valor .) ]

    operacion_binaria              shift and go to state 88

state 128

    (77) condicion -> I_PARENTESIS valor D_PARENTESIS .

    I_LLAVE         reduce using rule 77 (condicion -> I_PARENTESIS valor D_PARENTESIS .)


state 129

    (5) body -> I_LLAVE instruct_expression . D_LLAVE

    D_LLAVE         shift and go to state 159


state 130

    (8) body -> I_LLAVE D_LLAVE .

    D_LLAVE         reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    VAR             reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    ID              reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    IF              reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    FOR             reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    MAP             reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 8 (body -> I_LLAVE D_LLAVE .)
    $end            reduce using rule 8 (body -> I_LLAVE D_LLAVE .)


state 131

    (6) body -> I_LLAVE varias_instrucciones .
    (7) body -> I_LLAVE varias_instrucciones . instruct_expression D_LLAVE
    (11) instruct_expression -> . RETURN valor

    D_LLAVE         reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    VAR             reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    ID              reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    IF              reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    ELSE            reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    ELSEIF          reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    FOR             reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    MAP             reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    MAKE            reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    TYPE            reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    FUNC            reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    PRINTLN         reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    PRINTF          reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    PRINT           reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    I_CORCHETE      reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    $end            reduce using rule 6 (body -> I_LLAVE varias_instrucciones .)
    RETURN          shift and go to state 132

    instruct_expression            shift and go to state 160

state 132

    (11) instruct_expression -> RETURN . valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 161
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 133

    (9) varias_instrucciones -> instruccion .
    (10) varias_instrucciones -> instruccion . varias_instrucciones
    (9) varias_instrucciones -> . instruccion
    (10) varias_instrucciones -> . instruccion varias_instrucciones
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for MAKE resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for PRINTLN resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for I_CORCHETE resolved as shift
    RETURN          reduce using rule 9 (varias_instrucciones -> instruccion .)
    D_LLAVE         reduce using rule 9 (varias_instrucciones -> instruccion .)
    FUNC            reduce using rule 9 (varias_instrucciones -> instruccion .)
    $end            reduce using rule 9 (varias_instrucciones -> instruccion .)
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

  ! VAR             [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! ID              [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! IF              [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! ELSE            [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! ELSEIF          [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! FOR             [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! MAP             [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! MAKE            [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! TYPE            [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! PRINTLN         [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! PRINTF          [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! PRINT           [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]
  ! I_CORCHETE      [ reduce using rule 9 (varias_instrucciones -> instruccion .) ]

    instruccion                    shift and go to state 133
    varias_instrucciones           shift and go to state 162
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 134

    (26) instruccion -> ELSE I_LLAVE body D_LLAVE .

    $end            reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    ID              reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    IF              reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 26 (instruccion -> ELSE I_LLAVE body D_LLAVE .)


state 135

    (27) instruccion -> ELSEIF condicion I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 163


state 136

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE . ID I_LLAVE body D_LLAVE

    ID              shift and go to state 164


state 137

    (30) instruccion -> FOR ID COMA ID . DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE

    DECLARACION_ASIGNACION shift and go to state 165


state 138

    (29) instruccion -> FOR instruccion PUNTO_COMA valor . PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    PUNTO_COMA      shift and go to state 166
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 139

    (63) instruccion -> MAP I_CORCHETE type D_CORCHETE . type I_LLAVE D_LLAVE
    (65) instruccion -> MAP I_CORCHETE type D_CORCHETE . type I_LLAVE claves_valores D_LLAVE
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 167

state 140

    (47) array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE . D_LLAVE
    (55) array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE . valores_int D_LLAVE
    (81) valores_int -> . valor_int
    (82) valores_int -> . valor_int COMA valores_int
    (123) valor_int -> . INT

    D_LLAVE         shift and go to state 168
    INT             shift and go to state 58

    valores_int                    shift and go to state 169
    valor_int                      shift and go to state 170

state 141

    (48) array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE . D_LLAVE
    (56) array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE . valores_double D_LLAVE
    (83) valores_double -> . valor_double
    (84) valores_double -> . valor_double COMA valores_double
    (124) valor_double -> . DOUBLE

    D_LLAVE         shift and go to state 171
    DOUBLE          shift and go to state 59

    valores_double                 shift and go to state 172
    valor_double                   shift and go to state 173

state 142

    (49) array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE . D_LLAVE
    (57) array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE . valores_string D_LLAVE
    (85) valores_string -> . valor_string
    (86) valores_string -> . valor_string COMA valores_string
    (125) valor_string -> . STRING

    D_LLAVE         shift and go to state 174
    STRING          shift and go to state 60

    valores_string                 shift and go to state 175
    valor_string                   shift and go to state 176

state 143

    (50) array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE . D_LLAVE
    (58) array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE . valores_boolean D_LLAVE
    (87) valores_boolean -> . valor_boolean
    (88) valores_boolean -> . valor_boolean COMA valores_boolean
    (126) valor_boolean -> . BOOLEAN

    D_LLAVE         shift and go to state 177
    BOOLEAN         shift and go to state 61

    valores_boolean                shift and go to state 178
    valor_boolean                  shift and go to state 179

state 144

    (51) array_length_int -> I_CORCHETE INT D_CORCHETE INT . I_LLAVE D_LLAVE
    (59) array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT . I_LLAVE valores_int D_LLAVE

    I_LLAVE         shift and go to state 180


state 145

    (52) array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE . I_LLAVE D_LLAVE
    (60) array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE . I_LLAVE valores_double D_LLAVE

    I_LLAVE         shift and go to state 181


state 146

    (53) array_length_string -> I_CORCHETE INT D_CORCHETE STRING . I_LLAVE D_LLAVE
    (61) array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING . I_LLAVE valores_string D_LLAVE

    I_LLAVE         shift and go to state 182


state 147

    (54) array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN . I_LLAVE D_LLAVE
    (62) array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN . I_LLAVE valores_boolean D_LLAVE

    I_LLAVE         shift and go to state 183


state 148

    (64) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE . type D_CORCHETE type D_PARENTESIS
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 184

state 149

    (66) instruccion -> TYPE ID STRUCT I_LLAVE . atributos_struct D_LLAVE
    (67) atributos_struct -> . atributo
    (68) atributos_struct -> . atributo atributos_struct
    (69) atributo -> . ID type

    ID              shift and go to state 153

    atributos_struct               shift and go to state 185
    atributo                       shift and go to state 186

state 150

    (20) cuerpo_fun -> parametrosMetodo body .

    VAR             reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    ID              reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    IF              reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    ELSE            reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    ELSEIF          reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    FOR             reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    MAP             reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    MAKE            reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    TYPE            reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    FUNC            reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    PRINTLN         reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    PRINTF          reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    PRINT           reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    I_CORCHETE      reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)
    $end            reduce using rule 20 (cuerpo_fun -> parametrosMetodo body .)


state 151

    (21) parametrosMetodo -> I_PARENTESIS parametros . D_PARENTESIS type

    D_PARENTESIS    shift and go to state 187


state 152

    (22) parametros -> atributo .
    (23) parametros -> atributo . COMA parametros

    D_PARENTESIS    reduce using rule 22 (parametros -> atributo .)
    COMA            shift and go to state 188


state 153

    (69) atributo -> ID . type
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 189

state 154

    (80) valores -> valor COMA valores .

    D_PARENTESIS    reduce using rule 80 (valores -> valor COMA valores .)
    D_LLAVE         reduce using rule 80 (valores -> valor COMA valores .)


state 155

    (71) init_struct -> VAR ID ID ASIGNACION ID . I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 190


state 156

    (13) instruccion -> VAR ID type ASIGNACION valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    $end            reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    PUNTO_COMA      reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    D_LLAVE         reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    VAR             reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    ID              reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    IF              reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    ELSE            reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    ELSEIF          reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    FOR             reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    MAP             reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    MAKE            reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    TYPE            reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    PRINTLN         reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    PRINTF          reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    PRINT           reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    I_CORCHETE      reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    RETURN          reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    FUNC            reduce using rule 13 (instruccion -> VAR ID type ASIGNACION valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 157

    (72) init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores . D_LLAVE

    D_LLAVE         shift and go to state 191


state 158

    (25) instruccion -> IF condicion I_LLAVE body D_LLAVE .

    $end            reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    ID              reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    IF              reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 25 (instruccion -> IF condicion I_LLAVE body D_LLAVE .)


state 159

    (5) body -> I_LLAVE instruct_expression D_LLAVE .

    D_LLAVE         reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    VAR             reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    ID              reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    IF              reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    ELSE            reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    ELSEIF          reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    FOR             reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    MAP             reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    MAKE            reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    TYPE            reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    FUNC            reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    PRINTLN         reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    PRINTF          reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    PRINT           reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    I_CORCHETE      reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)
    $end            reduce using rule 5 (body -> I_LLAVE instruct_expression D_LLAVE .)


state 160

    (7) body -> I_LLAVE varias_instrucciones instruct_expression . D_LLAVE

    D_LLAVE         shift and go to state 192


state 161

    (11) instruct_expression -> RETURN valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    D_LLAVE         reduce using rule 11 (instruct_expression -> RETURN valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 162

    (10) varias_instrucciones -> instruccion varias_instrucciones .

    RETURN          reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    D_LLAVE         reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    VAR             reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    ID              reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    IF              reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    ELSE            reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    ELSEIF          reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    FOR             reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    MAP             reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    MAKE            reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    TYPE            reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    FUNC            reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    PRINTLN         reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    PRINTF          reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    PRINT           reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    I_CORCHETE      reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)
    $end            reduce using rule 10 (varias_instrucciones -> instruccion varias_instrucciones .)


state 163

    (27) instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .

    $end            reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    ID              reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    IF              reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 27 (instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE .)


state 164

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 193


state 165

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION . RANGE ID I_LLAVE body D_LLAVE

    RANGE           shift and go to state 194


state 166

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA . ID operador_matematico I_LLAVE body D_LLAVE

    ID              shift and go to state 195


state 167

    (63) instruccion -> MAP I_CORCHETE type D_CORCHETE type . I_LLAVE D_LLAVE
    (65) instruccion -> MAP I_CORCHETE type D_CORCHETE type . I_LLAVE claves_valores D_LLAVE

    I_LLAVE         shift and go to state 196


state 168

    (47) array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .

    $end            reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    VAR             reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    ID              reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    IF              reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    FOR             reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    MAP             reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 47 (array_int -> I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE .)


state 169

    (55) array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int . D_LLAVE

    D_LLAVE         shift and go to state 197


state 170

    (81) valores_int -> valor_int .
    (82) valores_int -> valor_int . COMA valores_int

    D_LLAVE         reduce using rule 81 (valores_int -> valor_int .)
    COMA            shift and go to state 198


state 171

    (48) array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .

    $end            reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    VAR             reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ID              reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    IF              reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    FOR             reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    MAP             reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 48 (array_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)


state 172

    (56) array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double . D_LLAVE

    D_LLAVE         shift and go to state 199


state 173

    (83) valores_double -> valor_double .
    (84) valores_double -> valor_double . COMA valores_double

    D_LLAVE         reduce using rule 83 (valores_double -> valor_double .)
    COMA            shift and go to state 200


state 174

    (49) array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .

    $end            reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    VAR             reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ID              reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    IF              reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    FOR             reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    MAP             reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 49 (array_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE .)


state 175

    (57) array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string . D_LLAVE

    D_LLAVE         shift and go to state 201


state 176

    (85) valores_string -> valor_string .
    (86) valores_string -> valor_string . COMA valores_string

    D_LLAVE         reduce using rule 85 (valores_string -> valor_string .)
    COMA            shift and go to state 202


state 177

    (50) array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .

    $end            reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    VAR             reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ID              reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    IF              reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    FOR             reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    MAP             reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 50 (array_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)


state 178

    (58) array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean . D_LLAVE

    D_LLAVE         shift and go to state 203


state 179

    (87) valores_boolean -> valor_boolean .
    (88) valores_boolean -> valor_boolean . COMA valores_boolean

    D_LLAVE         reduce using rule 87 (valores_boolean -> valor_boolean .)
    COMA            shift and go to state 204


state 180

    (51) array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE . D_LLAVE
    (59) array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE . valores_int D_LLAVE
    (81) valores_int -> . valor_int
    (82) valores_int -> . valor_int COMA valores_int
    (123) valor_int -> . INT

    D_LLAVE         shift and go to state 205
    INT             shift and go to state 58

    valores_int                    shift and go to state 206
    valor_int                      shift and go to state 170

state 181

    (52) array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE . D_LLAVE
    (60) array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE . valores_double D_LLAVE
    (83) valores_double -> . valor_double
    (84) valores_double -> . valor_double COMA valores_double
    (124) valor_double -> . DOUBLE

    D_LLAVE         shift and go to state 207
    DOUBLE          shift and go to state 59

    valores_double                 shift and go to state 208
    valor_double                   shift and go to state 173

state 182

    (53) array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE . D_LLAVE
    (61) array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE . valores_string D_LLAVE
    (85) valores_string -> . valor_string
    (86) valores_string -> . valor_string COMA valores_string
    (125) valor_string -> . STRING

    D_LLAVE         shift and go to state 209
    STRING          shift and go to state 60

    valores_string                 shift and go to state 210
    valor_string                   shift and go to state 176

state 183

    (54) array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE . D_LLAVE
    (62) array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE . valores_boolean D_LLAVE
    (87) valores_boolean -> . valor_boolean
    (88) valores_boolean -> . valor_boolean COMA valores_boolean
    (126) valor_boolean -> . BOOLEAN

    D_LLAVE         shift and go to state 211
    BOOLEAN         shift and go to state 61

    valores_boolean                shift and go to state 212
    valor_boolean                  shift and go to state 179

state 184

    (64) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type . D_CORCHETE type D_PARENTESIS

    D_CORCHETE      shift and go to state 213


state 185

    (66) instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct . D_LLAVE

    D_LLAVE         shift and go to state 214


state 186

    (67) atributos_struct -> atributo .
    (68) atributos_struct -> atributo . atributos_struct
    (67) atributos_struct -> . atributo
    (68) atributos_struct -> . atributo atributos_struct
    (69) atributo -> . ID type

    D_LLAVE         reduce using rule 67 (atributos_struct -> atributo .)
    ID              shift and go to state 153

    atributo                       shift and go to state 186
    atributos_struct               shift and go to state 215

state 187

    (21) parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS . type
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 216

state 188

    (23) parametros -> atributo COMA . parametros
    (22) parametros -> . atributo
    (23) parametros -> . atributo COMA parametros
    (24) parametros -> .
    (69) atributo -> . ID type

    D_PARENTESIS    reduce using rule 24 (parametros -> .)
    ID              shift and go to state 153

    atributo                       shift and go to state 152
    parametros                     shift and go to state 217

state 189

    (69) atributo -> ID type .

    COMA            reduce using rule 69 (atributo -> ID type .)
    D_PARENTESIS    reduce using rule 69 (atributo -> ID type .)
    ID              reduce using rule 69 (atributo -> ID type .)
    D_LLAVE         reduce using rule 69 (atributo -> ID type .)


state 190

    (71) init_struct -> VAR ID ID ASIGNACION ID I_LLAVE . valores D_LLAVE
    (79) valores -> . valor
    (80) valores -> . valor COMA valores
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valores                        shift and go to state 218
    valor                          shift and go to state 74
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 191

    (72) init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .

    $end            reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    D_LLAVE         reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    VAR             reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ID              reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    IF              reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ELSE            reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ELSEIF          reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    FOR             reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    MAP             reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    MAKE            reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    TYPE            reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINTLN         reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINTF          reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINT           reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    I_CORCHETE      reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    RETURN          reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)
    FUNC            reduce using rule 72 (init_struct -> ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE .)


state 192

    (7) body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .

    D_LLAVE         reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    VAR             reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    ID              reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    IF              reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    ELSE            reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    ELSEIF          reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    FOR             reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    MAP             reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    MAKE            reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    TYPE            reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    FUNC            reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    PRINTLN         reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    PRINTF          reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    PRINT           reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    I_CORCHETE      reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)
    $end            reduce using rule 7 (body -> I_LLAVE varias_instrucciones instruct_expression D_LLAVE .)


state 193

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 219
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 194

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE . ID I_LLAVE body D_LLAVE

    ID              shift and go to state 220


state 195

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID . operador_matematico I_LLAVE body D_LLAVE
    (98) operador_matematico -> . INCREMENTO
    (99) operador_matematico -> . DECREMENTO

    INCREMENTO      shift and go to state 48
    DECREMENTO      shift and go to state 49

    operador_matematico            shift and go to state 221

state 196

    (63) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE . D_LLAVE
    (65) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE . claves_valores D_LLAVE
    (74) claves_valores -> . clave_valor
    (75) claves_valores -> . clave_valor COMA claves_valores
    (73) clave_valor -> . valor DOS_PUNTOS valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    D_LLAVE         shift and go to state 222
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    claves_valores                 shift and go to state 223
    clave_valor                    shift and go to state 224
    valor                          shift and go to state 225
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 197

    (55) array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .

    $end            reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PUNTO_COMA      reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    D_LLAVE         reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    VAR             reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ID              reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    IF              reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ELSE            reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ELSEIF          reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    FOR             reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    MAP             reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    MAKE            reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    TYPE            reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINTLN         reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINTF          reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINT           reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    I_CORCHETE      reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    RETURN          reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    FUNC            reduce using rule 55 (array_con_valores_int -> I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)


state 198

    (82) valores_int -> valor_int COMA . valores_int
    (81) valores_int -> . valor_int
    (82) valores_int -> . valor_int COMA valores_int
    (123) valor_int -> . INT

    INT             shift and go to state 58

    valor_int                      shift and go to state 170
    valores_int                    shift and go to state 226

state 199

    (56) array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .

    $end            reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PUNTO_COMA      reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    D_LLAVE         reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    VAR             reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ID              reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    IF              reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ELSE            reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ELSEIF          reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    FOR             reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    MAP             reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    MAKE            reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    TYPE            reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINTLN         reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINTF          reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINT           reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    I_CORCHETE      reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    RETURN          reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    FUNC            reduce using rule 56 (array_con_valores_double -> I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)


state 200

    (84) valores_double -> valor_double COMA . valores_double
    (83) valores_double -> . valor_double
    (84) valores_double -> . valor_double COMA valores_double
    (124) valor_double -> . DOUBLE

    DOUBLE          shift and go to state 59

    valor_double                   shift and go to state 173
    valores_double                 shift and go to state 227

state 201

    (57) array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .

    $end            reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PUNTO_COMA      reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    D_LLAVE         reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    VAR             reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ID              reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    IF              reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ELSE            reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ELSEIF          reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    FOR             reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    MAP             reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    MAKE            reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    TYPE            reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINTLN         reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINTF          reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINT           reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    I_CORCHETE      reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    RETURN          reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    FUNC            reduce using rule 57 (array_con_valores_string -> I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)


state 202

    (86) valores_string -> valor_string COMA . valores_string
    (85) valores_string -> . valor_string
    (86) valores_string -> . valor_string COMA valores_string
    (125) valor_string -> . STRING

    STRING          shift and go to state 60

    valor_string                   shift and go to state 176
    valores_string                 shift and go to state 228

state 203

    (58) array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .

    $end            reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PUNTO_COMA      reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    D_LLAVE         reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    VAR             reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ID              reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    IF              reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ELSE            reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ELSEIF          reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    FOR             reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    MAP             reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    MAKE            reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    TYPE            reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINTLN         reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINTF          reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINT           reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    I_CORCHETE      reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    RETURN          reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    FUNC            reduce using rule 58 (array_con_valores_boolean -> I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)


state 204

    (88) valores_boolean -> valor_boolean COMA . valores_boolean
    (87) valores_boolean -> . valor_boolean
    (88) valores_boolean -> . valor_boolean COMA valores_boolean
    (126) valor_boolean -> . BOOLEAN

    BOOLEAN         shift and go to state 61

    valor_boolean                  shift and go to state 179
    valores_boolean                shift and go to state 229

state 205

    (51) array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .

    $end            reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    VAR             reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    ID              reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    IF              reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    FOR             reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    MAP             reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 51 (array_length_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE .)


state 206

    (59) array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int . D_LLAVE

    D_LLAVE         shift and go to state 230


state 207

    (52) array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .

    $end            reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    VAR             reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ID              reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    IF              reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    FOR             reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    MAP             reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 52 (array_length_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE .)


state 208

    (60) array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double . D_LLAVE

    D_LLAVE         shift and go to state 231


state 209

    (53) array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .

    $end            reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    VAR             reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ID              reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    IF              reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    FOR             reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    MAP             reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 53 (array_length_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE .)


state 210

    (61) array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string . D_LLAVE

    D_LLAVE         shift and go to state 232


state 211

    (54) array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .

    $end            reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    VAR             reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ID              reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    IF              reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    FOR             reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    MAP             reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 54 (array_length_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE .)


state 212

    (62) array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean . D_LLAVE

    D_LLAVE         shift and go to state 233


state 213

    (64) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE . type D_PARENTESIS
    (93) type -> . BOOL
    (94) type -> . STRINGTYPE
    (95) type -> . INTEGER
    (96) type -> . FLOAT32
    (97) type -> . FLOAT64

    BOOL            shift and go to state 78
    STRINGTYPE      shift and go to state 79
    INTEGER         shift and go to state 80
    FLOAT32         shift and go to state 81
    FLOAT64         shift and go to state 82

    type                           shift and go to state 234

state 214

    (66) instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .

    $end            reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    PUNTO_COMA      reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    D_LLAVE         reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    VAR             reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    ID              reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    IF              reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    ELSE            reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    ELSEIF          reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    FOR             reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    MAP             reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    MAKE            reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    TYPE            reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    PRINTLN         reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    PRINTF          reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    PRINT           reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    I_CORCHETE      reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    RETURN          reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)
    FUNC            reduce using rule 66 (instruccion -> TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE .)


state 215

    (68) atributos_struct -> atributo atributos_struct .

    D_LLAVE         reduce using rule 68 (atributos_struct -> atributo atributos_struct .)


state 216

    (21) parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .

    I_LLAVE         reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    VAR             reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    ID              reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    IF              reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    ELSE            reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    ELSEIF          reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    FOR             reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    MAP             reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    MAKE            reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    TYPE            reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    PRINTLN         reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    PRINTF          reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    PRINT           reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)
    I_CORCHETE      reduce using rule 21 (parametrosMetodo -> I_PARENTESIS parametros D_PARENTESIS type .)


state 217

    (23) parametros -> atributo COMA parametros .

    D_PARENTESIS    reduce using rule 23 (parametros -> atributo COMA parametros .)


state 218

    (71) init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores . D_LLAVE

    D_LLAVE         shift and go to state 235


state 219

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 236


state 220

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 237


state 221

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico . I_LLAVE body D_LLAVE

    I_LLAVE         shift and go to state 238


state 222

    (63) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .

    $end            reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    PUNTO_COMA      reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    D_LLAVE         reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    VAR             reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    ID              reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    IF              reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    ELSE            reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    ELSEIF          reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    FOR             reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    MAP             reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    MAKE            reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    TYPE            reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    PRINTLN         reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    PRINTF          reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    PRINT           reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    I_CORCHETE      reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    RETURN          reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)
    FUNC            reduce using rule 63 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE .)


state 223

    (65) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores . D_LLAVE

    D_LLAVE         shift and go to state 239


state 224

    (74) claves_valores -> clave_valor .
    (75) claves_valores -> clave_valor . COMA claves_valores

    D_LLAVE         reduce using rule 74 (claves_valores -> clave_valor .)
    COMA            shift and go to state 240


state 225

    (73) clave_valor -> valor . DOS_PUNTOS valor
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    DOS_PUNTOS      shift and go to state 241
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 226

    (82) valores_int -> valor_int COMA valores_int .

    D_LLAVE         reduce using rule 82 (valores_int -> valor_int COMA valores_int .)


state 227

    (84) valores_double -> valor_double COMA valores_double .

    D_LLAVE         reduce using rule 84 (valores_double -> valor_double COMA valores_double .)


state 228

    (86) valores_string -> valor_string COMA valores_string .

    D_LLAVE         reduce using rule 86 (valores_string -> valor_string COMA valores_string .)


state 229

    (88) valores_boolean -> valor_boolean COMA valores_boolean .

    D_LLAVE         reduce using rule 88 (valores_boolean -> valor_boolean COMA valores_boolean .)


state 230

    (59) array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .

    $end            reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PUNTO_COMA      reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    D_LLAVE         reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    VAR             reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ID              reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    IF              reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ELSE            reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    ELSEIF          reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    FOR             reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    MAP             reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    MAKE            reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    TYPE            reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINTLN         reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINTF          reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    PRINT           reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    I_CORCHETE      reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    RETURN          reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)
    FUNC            reduce using rule 59 (array_length_con_valores_int -> I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE .)


state 231

    (60) array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .

    $end            reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PUNTO_COMA      reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    D_LLAVE         reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    VAR             reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ID              reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    IF              reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ELSE            reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    ELSEIF          reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    FOR             reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    MAP             reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    MAKE            reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    TYPE            reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINTLN         reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINTF          reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    PRINT           reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    I_CORCHETE      reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    RETURN          reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)
    FUNC            reduce using rule 60 (array_length_con_valores_double -> I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE .)


state 232

    (61) array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .

    $end            reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PUNTO_COMA      reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    D_LLAVE         reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    VAR             reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ID              reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    IF              reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ELSE            reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    ELSEIF          reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    FOR             reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    MAP             reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    MAKE            reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    TYPE            reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINTLN         reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINTF          reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    PRINT           reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    I_CORCHETE      reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    RETURN          reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)
    FUNC            reduce using rule 61 (array_length_con_valores_string -> I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE .)


state 233

    (62) array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .

    $end            reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PUNTO_COMA      reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    D_LLAVE         reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    VAR             reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ID              reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    IF              reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ELSE            reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    ELSEIF          reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    FOR             reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    MAP             reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    MAKE            reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    TYPE            reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINTLN         reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINTF          reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    PRINT           reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    I_CORCHETE      reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    RETURN          reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)
    FUNC            reduce using rule 62 (array_length_con_valores_boolean -> I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE .)


state 234

    (64) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type . D_PARENTESIS

    D_PARENTESIS    shift and go to state 242


state 235

    (71) init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .

    $end            reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    D_LLAVE         reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    VAR             reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ID              reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    IF              reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ELSE            reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    ELSEIF          reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    FOR             reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    MAP             reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    MAKE            reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    TYPE            reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINTLN         reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINTF          reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    PRINT           reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    I_CORCHETE      reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    RETURN          reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)
    FUNC            reduce using rule 71 (init_struct -> VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE .)


state 236

    (28) instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .

    $end            reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ID              reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    IF              reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 28 (instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)


state 237

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    body                           shift and go to state 243
    instruccion                    shift and go to state 103
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 238

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE . body D_LLAVE
    (4) body -> . instruccion
    (5) body -> . I_LLAVE instruct_expression D_LLAVE
    (6) body -> . I_LLAVE varias_instrucciones
    (7) body -> . I_LLAVE varias_instrucciones instruct_expression D_LLAVE
    (8) body -> . I_LLAVE D_LLAVE
    (12) instruccion -> . print I_PARENTESIS valores D_PARENTESIS
    (13) instruccion -> . VAR ID type ASIGNACION valor
    (14) instruccion -> . VAR ID ASIGNACION valor
    (15) instruccion -> . VAR ID ASIGNACION instruccion
    (16) instruccion -> . ID asignacion valor
    (17) instruccion -> . ID asignacion instruccion
    (18) instruccion -> . ID operador_matematico
    (25) instruccion -> . IF condicion I_LLAVE body D_LLAVE
    (26) instruccion -> . ELSE I_LLAVE body D_LLAVE
    (27) instruccion -> . ELSEIF condicion I_LLAVE body D_LLAVE
    (28) instruccion -> . FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (29) instruccion -> . FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE
    (30) instruccion -> . FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE
    (31) instruccion -> . array_int
    (32) instruccion -> . array_double
    (33) instruccion -> . array_string
    (34) instruccion -> . array_boolean
    (35) instruccion -> . array_length_int
    (36) instruccion -> . array_length_double
    (37) instruccion -> . array_length_string
    (38) instruccion -> . array_length_boolean
    (39) instruccion -> . array_con_valores_int
    (40) instruccion -> . array_con_valores_double
    (41) instruccion -> . array_con_valores_string
    (42) instruccion -> . array_con_valores_boolean
    (43) instruccion -> . array_length_con_valores_int
    (44) instruccion -> . array_length_con_valores_double
    (45) instruccion -> . array_length_con_valores_string
    (46) instruccion -> . array_length_con_valores_boolean
    (63) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE
    (64) instruccion -> . MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS
    (65) instruccion -> . MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE
    (66) instruccion -> . TYPE ID STRUCT I_LLAVE atributos_struct D_LLAVE
    (70) instruccion -> . init_struct
    (90) print -> . PRINTLN
    (91) print -> . PRINTF
    (92) print -> . PRINT
    (47) array_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE D_LLAVE
    (48) array_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (49) array_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE D_LLAVE
    (50) array_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (51) array_length_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE D_LLAVE
    (52) array_length_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE D_LLAVE
    (53) array_length_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE D_LLAVE
    (54) array_length_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE D_LLAVE
    (55) array_con_valores_int -> . I_CORCHETE D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (56) array_con_valores_double -> . I_CORCHETE D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (57) array_con_valores_string -> . I_CORCHETE D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (58) array_con_valores_boolean -> . I_CORCHETE D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (59) array_length_con_valores_int -> . I_CORCHETE INT D_CORCHETE INT I_LLAVE valores_int D_LLAVE
    (60) array_length_con_valores_double -> . I_CORCHETE INT D_CORCHETE DOUBLE I_LLAVE valores_double D_LLAVE
    (61) array_length_con_valores_string -> . I_CORCHETE INT D_CORCHETE STRING I_LLAVE valores_string D_LLAVE
    (62) array_length_con_valores_boolean -> . I_CORCHETE INT D_CORCHETE BOOLEAN I_LLAVE valores_boolean D_LLAVE
    (71) init_struct -> . VAR ID ID ASIGNACION ID I_LLAVE valores D_LLAVE
    (72) init_struct -> . ID DECLARACION_ASIGNACION ID I_LLAVE valores D_LLAVE

    I_LLAVE         shift and go to state 101
    VAR             shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    ELSEIF          shift and go to state 9
    FOR             shift and go to state 10
    MAP             shift and go to state 27
    MAKE            shift and go to state 29
    TYPE            shift and go to state 30
    PRINTLN         shift and go to state 33
    PRINTF          shift and go to state 34
    PRINT           shift and go to state 35
    I_CORCHETE      shift and go to state 28

    instruccion                    shift and go to state 103
    body                           shift and go to state 244
    print                          shift and go to state 4
    array_int                      shift and go to state 11
    array_double                   shift and go to state 12
    array_string                   shift and go to state 13
    array_boolean                  shift and go to state 14
    array_length_int               shift and go to state 15
    array_length_double            shift and go to state 16
    array_length_string            shift and go to state 17
    array_length_boolean           shift and go to state 18
    array_con_valores_int          shift and go to state 19
    array_con_valores_double       shift and go to state 20
    array_con_valores_string       shift and go to state 21
    array_con_valores_boolean      shift and go to state 22
    array_length_con_valores_int   shift and go to state 23
    array_length_con_valores_double shift and go to state 24
    array_length_con_valores_string shift and go to state 25
    array_length_con_valores_boolean shift and go to state 26
    init_struct                    shift and go to state 31

state 239

    (65) instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .

    $end            reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    PUNTO_COMA      reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    D_LLAVE         reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    VAR             reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    ID              reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    IF              reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    ELSE            reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    ELSEIF          reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    FOR             reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    MAP             reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    MAKE            reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    TYPE            reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    PRINTLN         reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    PRINTF          reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    PRINT           reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    I_CORCHETE      reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    RETURN          reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)
    FUNC            reduce using rule 65 (instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE .)


state 240

    (75) claves_valores -> clave_valor COMA . claves_valores
    (74) claves_valores -> . clave_valor
    (75) claves_valores -> . clave_valor COMA claves_valores
    (73) clave_valor -> . valor DOS_PUNTOS valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    clave_valor                    shift and go to state 224
    claves_valores                 shift and go to state 245
    valor                          shift and go to state 225
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 241

    (73) clave_valor -> valor DOS_PUNTOS . valor
    (89) valor -> . valor operacion_binaria valor
    (118) valor -> . valor_int
    (119) valor -> . valor_double
    (120) valor -> . valor_string
    (121) valor -> . valor_boolean
    (122) valor -> . valor_variable
    (123) valor_int -> . INT
    (124) valor_double -> . DOUBLE
    (125) valor_string -> . STRING
    (126) valor_boolean -> . BOOLEAN
    (127) valor_variable -> . ID

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    BOOLEAN         shift and go to state 61
    ID              shift and go to state 62

    valor                          shift and go to state 246
    valor_int                      shift and go to state 53
    valor_double                   shift and go to state 54
    valor_string                   shift and go to state 55
    valor_boolean                  shift and go to state 56
    valor_variable                 shift and go to state 57

state 242

    (64) instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .

    $end            reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    PUNTO_COMA      reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    D_LLAVE         reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    VAR             reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    ID              reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    IF              reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    ELSE            reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    ELSEIF          reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    FOR             reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    MAP             reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    MAKE            reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    TYPE            reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    PRINTLN         reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    PRINTF          reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    PRINT           reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    I_CORCHETE      reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    RETURN          reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)
    FUNC            reduce using rule 64 (instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS .)


state 243

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 247


state 244

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body . D_LLAVE

    D_LLAVE         shift and go to state 248


state 245

    (75) claves_valores -> clave_valor COMA claves_valores .

    D_LLAVE         reduce using rule 75 (claves_valores -> clave_valor COMA claves_valores .)


state 246

    (73) clave_valor -> valor DOS_PUNTOS valor .
    (89) valor -> valor . operacion_binaria valor
    (107) operacion_binaria -> . ADICION
    (108) operacion_binaria -> . RESTA
    (109) operacion_binaria -> . MULTIPLICACION
    (110) operacion_binaria -> . DIVISION
    (111) operacion_binaria -> . MODULO
    (112) operacion_binaria -> . MENOR_IGUAL
    (113) operacion_binaria -> . IGUAL
    (114) operacion_binaria -> . DIFERENTE
    (115) operacion_binaria -> . MAYOR
    (116) operacion_binaria -> . MAYOR_IGUAL
    (117) operacion_binaria -> . MENOR

    COMA            reduce using rule 73 (clave_valor -> valor DOS_PUNTOS valor .)
    D_LLAVE         reduce using rule 73 (clave_valor -> valor DOS_PUNTOS valor .)
    ADICION         shift and go to state 89
    RESTA           shift and go to state 90
    MULTIPLICACION  shift and go to state 91
    DIVISION        shift and go to state 92
    MODULO          shift and go to state 93
    MENOR_IGUAL     shift and go to state 94
    IGUAL           shift and go to state 95
    DIFERENTE       shift and go to state 96
    MAYOR           shift and go to state 97
    MAYOR_IGUAL     shift and go to state 98
    MENOR           shift and go to state 99

    operacion_binaria              shift and go to state 88

state 247

    (30) instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .

    $end            reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ID              reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    IF              reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 30 (instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE .)


state 248

    (29) instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .

    $end            reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    PUNTO_COMA      reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    D_LLAVE         reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    VAR             reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    ID              reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    IF              reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    ELSE            reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    ELSEIF          reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    FOR             reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    MAP             reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    MAKE            reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    TYPE            reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    PRINTLN         reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    PRINTF          reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    PRINT           reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    I_CORCHETE      reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    RETURN          reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)
    FUNC            reduce using rule 29 (instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for ADICION in state 127 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 127 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 127 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 127 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 127 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 127 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 127 resolved as shift
WARNING: shift/reduce conflict for VAR in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 133 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for MAP in state 133 resolved as shift
WARNING: shift/reduce conflict for MAKE in state 133 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINTLN in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 133 resolved as shift
WARNING: shift/reduce conflict for I_CORCHETE in state 133 resolved as shift
