
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADICION AND ASIGNACION ASIGNACION_ADICION ASIGNACION_DIVISION ASIGNACION_MODULO ASIGNACION_MULTI ASIGNACION_RESTA BOOL BOOLEAN BREAK CASE CHAN COMA CONST CONTINUE DECLARACION_ASIGNACION DECREMENTO DEFAULT DEFER DIFERENTE DIVISION DOS_PUNTOS DOUBLE D_CORCHETE D_LLAVE D_PARENTESIS ELSE ELSEIF FALLTHROUGH FLOAT32 FLOAT64 FOR FUNC GO GOTO ID IDENTIFICADOR IF IGUAL IMPORT INCREMENTO INT INTEGER INTERFACE I_CORCHETE I_LLAVE I_PARENTESIS MAKE MAP MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL MODULO MULTIPLICACION NOT OR PACKAGE PRINT PRINTF PRINTLN PUNTO PUNTO_COMA RANGE RESTA RETURN SELECT STRING STRINGTYPE STRUCT SWITCH TYPE VARbody : instruccioninstruccion : print I_PARENTESIS valores D_PARENTESISinstruccion : VAR ID type ASIGNACION valor\n                   | VAR ID ASIGNACION valorinstruccion : ID asignacion valorinstruccion : ID operador_matematicoinstruccion : IF condicion I_LLAVE body D_LLAVEinstruccion : ELSE I_LLAVE body D_LLAVEinstruccion : ELSEIF condicion I_LLAVE body D_LLAVEinstruccion : FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVEinstruccion : FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVEinstruccion : FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVEinstruccion : I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVEinstruccion : I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVEinstruccion : I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVEinstruccion : I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVEinstruccion : MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVEinstruccion : MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESISinstruccion : MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVEclave_valor : valor DOS_PUNTOS valorclaves_valores : clave_valor \n          | clave_valor COMA claves_valorescondicion : valoriteracion_for : ID valores : valor\n          | valor COMA valoresvalor : valor operacion_binaria valorprint : PRINTLN\n          | PRINTF\n          | PRINTtype : BOOL\n          | STRINGTYPE\n          | INTEGER\n          | FLOAT32\n          | FLOAT64operador_matematico : INCREMENTO\n          | DECREMENTOasignacion : ASIGNACION\n          | ASIGNACION_ADICION\n          | ASIGNACION_RESTA\n          | ASIGNACION_MULTI\n          | DECLARACION_ASIGNACION\n          | ASIGNACION_DIVISION\n          | ASIGNACION_MODULOoperacion_binaria : ADICION\n          | RESTA\n          | MULTIPLICACION\n          | DIVISION\n          | MODULOoperacion_binaria : MENOR_IGUAL\n          | IGUAL\n          | DIFERENTE\n          | MAYOR\n          | MAYOR_IGUAL\n          | MENORvalor : INT\n          | DOUBLE\n          | STRING\n          | ID'
    
_lr_action_items = {'VAR':([0,9,35,53,67,102,120,121,],[4,4,4,4,4,4,4,4,]),'ID':([0,4,6,8,9,16,18,20,21,22,23,24,25,26,35,46,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,76,77,83,86,96,99,102,103,108,120,121,123,124,],[5,17,34,34,37,34,34,-38,-39,-40,-41,-42,-43,-44,5,34,5,34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,5,-42,84,34,34,34,94,34,104,34,5,111,34,5,5,34,34,]),'IF':([0,9,35,53,67,102,120,121,],[6,6,6,6,6,6,6,6,]),'ELSE':([0,9,35,53,67,102,120,121,],[7,7,7,7,7,7,7,7,]),'ELSEIF':([0,9,35,53,67,102,120,121,],[8,8,8,8,8,8,8,8,]),'FOR':([0,9,35,53,67,102,120,121,],[9,9,9,9,9,9,9,9,]),'I_CORCHETE':([0,9,11,35,53,67,74,102,120,121,],[10,10,41,10,10,10,89,10,10,10,]),'MAP':([0,9,35,42,53,67,102,120,121,],[11,11,11,74,11,11,11,11,11,]),'MAKE':([0,9,35,53,67,102,120,121,],[12,12,12,12,12,12,12,12,]),'PRINTLN':([0,9,35,53,67,102,120,121,],[13,13,13,13,13,13,13,13,]),'PRINTF':([0,9,35,53,67,102,120,121,],[14,14,14,14,14,14,14,14,]),'PRINT':([0,9,35,53,67,102,120,121,],[15,15,15,15,15,15,15,15,]),'$end':([1,2,19,27,28,31,32,33,34,52,75,78,80,81,91,92,93,97,105,106,113,114,119,122,125,130,131,],[0,-1,-6,-36,-37,-56,-57,-58,-59,-5,-2,-4,-27,-8,-3,-7,-9,-13,-15,-14,-16,-17,-10,-19,-18,-12,-11,]),'D_LLAVE':([2,19,27,28,31,32,33,34,44,52,66,75,78,79,80,81,82,86,90,91,92,93,97,98,99,105,106,107,108,110,113,114,115,116,119,122,125,126,127,128,129,130,131,],[-1,-6,-36,-37,-56,-57,-58,-59,-25,-5,81,-2,-4,92,-27,-8,93,97,-26,-3,-7,-9,-13,105,106,-15,-14,113,114,119,-16,-17,122,-21,-10,-19,-18,130,131,-22,-20,-12,-11,]),'I_PARENTESIS':([3,12,13,14,15,],[16,42,-28,-29,-30,]),'ASIGNACION':([5,17,37,45,47,48,49,50,51,],[20,46,20,77,-31,-32,-33,-34,-35,]),'ASIGNACION_ADICION':([5,37,],[21,21,]),'ASIGNACION_RESTA':([5,37,],[22,22,]),'ASIGNACION_MULTI':([5,37,],[23,23,]),'DECLARACION_ASIGNACION':([5,37,84,],[24,68,95,]),'ASIGNACION_DIVISION':([5,37,],[25,25,]),'ASIGNACION_MODULO':([5,37,],[26,26,]),'INCREMENTO':([5,37,104,],[27,27,27,]),'DECREMENTO':([5,37,104,],[28,28,28,]),'INT':([6,8,10,16,18,20,21,22,23,24,25,26,46,54,55,56,57,58,59,60,61,62,63,64,65,68,70,76,77,86,99,108,123,124,],[31,31,40,31,31,-38,-39,-40,-41,-42,-43,-44,31,31,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-42,31,31,31,31,31,31,31,31,]),'DOUBLE':([6,8,16,18,20,21,22,23,24,25,26,46,54,55,56,57,58,59,60,61,62,63,64,65,68,70,76,77,86,99,108,123,124,],[32,32,32,32,-38,-39,-40,-41,-42,-43,-44,32,32,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-42,32,32,32,32,32,32,32,32,]),'STRING':([6,8,16,18,20,21,22,23,24,25,26,46,54,55,56,57,58,59,60,61,62,63,64,65,68,70,76,77,86,99,108,123,124,],[33,33,33,33,-38,-39,-40,-41,-42,-43,-44,33,33,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-42,33,33,33,33,33,33,33,33,]),'I_LLAVE':([7,27,28,29,30,31,32,33,34,36,47,48,49,50,51,71,80,87,94,100,111,112,],[35,-36,-37,53,-23,-56,-57,-58,-59,67,-31,-32,-33,-34,-35,86,-27,99,102,108,120,121,]),'D_CORCHETE':([10,40,47,48,49,50,51,73,101,],[39,72,-31,-32,-33,-34,-35,88,109,]),'BOOL':([17,39,41,72,88,89,109,],[47,47,47,47,47,47,47,]),'STRINGTYPE':([17,39,41,72,88,89,109,],[48,48,48,48,48,48,48,]),'INTEGER':([17,39,41,72,88,89,109,],[49,49,49,49,49,49,49,]),'FLOAT32':([17,39,41,72,88,89,109,],[50,50,50,50,50,50,50,]),'FLOAT64':([17,39,41,72,88,89,109,],[51,51,51,51,51,51,51,]),'PUNTO_COMA':([19,27,28,31,32,33,34,38,52,75,78,80,81,85,91,92,93,97,105,106,113,114,119,122,125,130,131,],[-6,-36,-37,-56,-57,-58,-59,70,-5,-2,-4,-27,-8,96,-3,-7,-9,-13,-15,-14,-16,-17,-10,-19,-18,-12,-11,]),'ADICION':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[55,-56,-57,-58,-59,55,55,55,55,55,55,55,55,]),'RESTA':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[56,-56,-57,-58,-59,56,56,56,56,56,56,56,56,]),'MULTIPLICACION':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[57,-56,-57,-58,-59,57,57,57,57,57,57,57,57,]),'DIVISION':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[58,-56,-57,-58,-59,58,58,58,58,58,58,58,58,]),'MODULO':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[59,-56,-57,-58,-59,59,59,59,59,59,59,59,59,]),'MENOR_IGUAL':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[60,-56,-57,-58,-59,60,60,60,60,60,60,60,60,]),'IGUAL':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[61,-56,-57,-58,-59,61,61,61,61,61,61,61,61,]),'DIFERENTE':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[62,-56,-57,-58,-59,62,62,62,62,62,62,62,62,]),'MAYOR':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[63,-56,-57,-58,-59,63,63,63,63,63,63,63,63,]),'MAYOR_IGUAL':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[64,-56,-57,-58,-59,64,64,64,64,64,64,64,64,]),'MENOR':([30,31,32,33,34,44,52,78,80,85,91,117,129,],[65,-56,-57,-58,-59,65,65,65,65,65,65,65,65,]),'COMA':([31,32,33,34,37,44,80,116,129,],[-56,-57,-58,-59,69,76,-27,123,-20,]),'D_PARENTESIS':([31,32,33,34,43,44,47,48,49,50,51,80,90,118,],[-56,-57,-58,-59,75,-25,-31,-32,-33,-34,-35,-27,-26,125,]),'DOS_PUNTOS':([31,32,33,34,80,117,],[-56,-57,-58,-59,-27,124,]),'RANGE':([68,95,],[83,103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,35,53,67,102,120,121,],[1,66,79,82,110,126,127,]),'instruccion':([0,9,35,53,67,102,120,121,],[2,38,2,2,2,2,2,2,]),'print':([0,9,35,53,67,102,120,121,],[3,3,3,3,3,3,3,3,]),'asignacion':([5,37,],[18,18,]),'operador_matematico':([5,37,104,],[19,19,112,]),'condicion':([6,8,],[29,36,]),'valor':([6,8,16,18,46,54,70,76,77,86,99,108,123,124,],[30,30,44,52,78,80,85,44,91,44,44,117,117,129,]),'valores':([16,76,86,99,],[43,90,98,107,]),'type':([17,39,41,72,88,89,109,],[45,71,73,87,100,101,118,]),'operacion_binaria':([30,44,52,78,80,85,91,117,129,],[54,54,54,54,54,54,54,54,54,]),'claves_valores':([108,123,],[115,128,]),'clave_valor':([108,123,],[116,116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> instruccion','body',1,'p_body','sintactico.py',18),
  ('instruccion -> print I_PARENTESIS valores D_PARENTESIS','instruccion',4,'p_impresion','sintactico.py',21),
  ('instruccion -> VAR ID type ASIGNACION valor','instruccion',5,'p_declaracion','sintactico.py',24),
  ('instruccion -> VAR ID ASIGNACION valor','instruccion',4,'p_declaracion','sintactico.py',25),
  ('instruccion -> ID asignacion valor','instruccion',3,'p_asignacion','sintactico.py',28),
  ('instruccion -> ID operador_matematico','instruccion',2,'p_incremento_decremento','sintactico.py',31),
  ('instruccion -> IF condicion I_LLAVE body D_LLAVE','instruccion',5,'p_if_condicion','sintactico.py',36),
  ('instruccion -> ELSE I_LLAVE body D_LLAVE','instruccion',4,'p_else_condicion','sintactico.py',39),
  ('instruccion -> ELSEIF condicion I_LLAVE body D_LLAVE','instruccion',5,'p_if_else_condicion','sintactico.py',42),
  ('instruccion -> FOR ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE','instruccion',8,'p_for_each','sintactico.py',45),
  ('instruccion -> FOR instruccion PUNTO_COMA valor PUNTO_COMA ID operador_matematico I_LLAVE body D_LLAVE','instruccion',10,'p_for_condicion','sintactico.py',48),
  ('instruccion -> FOR ID COMA ID DECLARACION_ASIGNACION RANGE ID I_LLAVE body D_LLAVE','instruccion',10,'p_for_map','sintactico.py',51),
  ('instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE D_LLAVE','instruccion',5,'p_array','sintactico.py',56),
  ('instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE D_LLAVE','instruccion',6,'p_array_length','sintactico.py',59),
  ('instruccion -> I_CORCHETE D_CORCHETE type I_LLAVE valores D_LLAVE','instruccion',6,'p_array_con_valores','sintactico.py',62),
  ('instruccion -> I_CORCHETE INT D_CORCHETE type I_LLAVE valores D_LLAVE','instruccion',7,'p_array_length_con_valores','sintactico.py',65),
  ('instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE D_LLAVE','instruccion',7,'p_map','sintactico.py',68),
  ('instruccion -> MAKE I_PARENTESIS MAP I_CORCHETE type D_CORCHETE type D_PARENTESIS','instruccion',8,'p_map_make','sintactico.py',71),
  ('instruccion -> MAP I_CORCHETE type D_CORCHETE type I_LLAVE claves_valores D_LLAVE','instruccion',8,'p_map_valores','sintactico.py',74),
  ('clave_valor -> valor DOS_PUNTOS valor','clave_valor',3,'p_clave_valor','sintactico.py',77),
  ('claves_valores -> clave_valor','claves_valores',1,'p_multiple_clave_valor','sintactico.py',80),
  ('claves_valores -> clave_valor COMA claves_valores','claves_valores',3,'p_multiple_clave_valor','sintactico.py',81),
  ('condicion -> valor','condicion',1,'p_condicion','sintactico.py',84),
  ('iteracion_for -> ID','iteracion_for',1,'p_iteracion_for','sintactico.py',87),
  ('valores -> valor','valores',1,'p_multiples_valores','sintactico.py',95),
  ('valores -> valor COMA valores','valores',3,'p_multiples_valores','sintactico.py',96),
  ('valor -> valor operacion_binaria valor','valor',3,'p_operacion_mat','sintactico.py',99),
  ('print -> PRINTLN','print',1,'p_print_options','sintactico.py',102),
  ('print -> PRINTF','print',1,'p_print_options','sintactico.py',103),
  ('print -> PRINT','print',1,'p_print_options','sintactico.py',104),
  ('type -> BOOL','type',1,'p_tipo','sintactico.py',107),
  ('type -> STRINGTYPE','type',1,'p_tipo','sintactico.py',108),
  ('type -> INTEGER','type',1,'p_tipo','sintactico.py',109),
  ('type -> FLOAT32','type',1,'p_tipo','sintactico.py',110),
  ('type -> FLOAT64','type',1,'p_tipo','sintactico.py',111),
  ('operador_matematico -> INCREMENTO','operador_matematico',1,'p_operacion_mat_var','sintactico.py',114),
  ('operador_matematico -> DECREMENTO','operador_matematico',1,'p_operacion_mat_var','sintactico.py',115),
  ('asignacion -> ASIGNACION','asignacion',1,'p_operadores_asignacion','sintactico.py',118),
  ('asignacion -> ASIGNACION_ADICION','asignacion',1,'p_operadores_asignacion','sintactico.py',119),
  ('asignacion -> ASIGNACION_RESTA','asignacion',1,'p_operadores_asignacion','sintactico.py',120),
  ('asignacion -> ASIGNACION_MULTI','asignacion',1,'p_operadores_asignacion','sintactico.py',121),
  ('asignacion -> DECLARACION_ASIGNACION','asignacion',1,'p_operadores_asignacion','sintactico.py',122),
  ('asignacion -> ASIGNACION_DIVISION','asignacion',1,'p_operadores_asignacion','sintactico.py',123),
  ('asignacion -> ASIGNACION_MODULO','asignacion',1,'p_operadores_asignacion','sintactico.py',124),
  ('operacion_binaria -> ADICION','operacion_binaria',1,'p_operacion_mat_simbolos','sintactico.py',127),
  ('operacion_binaria -> RESTA','operacion_binaria',1,'p_operacion_mat_simbolos','sintactico.py',128),
  ('operacion_binaria -> MULTIPLICACION','operacion_binaria',1,'p_operacion_mat_simbolos','sintactico.py',129),
  ('operacion_binaria -> DIVISION','operacion_binaria',1,'p_operacion_mat_simbolos','sintactico.py',130),
  ('operacion_binaria -> MODULO','operacion_binaria',1,'p_operacion_mat_simbolos','sintactico.py',131),
  ('operacion_binaria -> MENOR_IGUAL','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',134),
  ('operacion_binaria -> IGUAL','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',135),
  ('operacion_binaria -> DIFERENTE','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',136),
  ('operacion_binaria -> MAYOR','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',137),
  ('operacion_binaria -> MAYOR_IGUAL','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',138),
  ('operacion_binaria -> MENOR','operacion_binaria',1,'p_operacion_comp_simbolos','sintactico.py',139),
  ('valor -> INT','valor',1,'p_valores','sintactico.py',142),
  ('valor -> DOUBLE','valor',1,'p_valores','sintactico.py',143),
  ('valor -> STRING','valor',1,'p_valores','sintactico.py',144),
  ('valor -> ID','valor',1,'p_valores','sintactico.py',145),
]
