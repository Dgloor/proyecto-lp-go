
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADICION AND ASIGNACION ASIGNACION_ADICION ASIGNACION_DIVISION ASIGNACION_MODULO ASIGNACION_MULTI ASIGNACION_RESTA BOOL BOOLEAN BREAK CASE CHAN COMA CONST CONTINUE DECLARACION_ASIGNACION DECREMENTO DEFAULT DEFER DIFERENTE DIVISION DOS_PUNTOS DOUBLE D_CORCHETE D_LLAVE D_PARENTESIS ELSE ELSEIF FALLTHROUGH FLOAT32 FLOAT64 FOR FUNC GO GOTO ID IDENTIFICADOR IF IGUAL IMPORT INCREMENTO INT INTEGER INTERFACE I_CORCHETE I_LLAVE I_PARENTESIS MAP MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL MODULO MULTIPLICACION NOT OR PACKAGE PRINT PRINTF PRINTLN PUNTO PUNTO_COMA RANGE RESTA RETURN SELECT STRING STRINGTYPE STRUCT SWITCH TYPE VARinstruccion : print I_PARENTESIS arg D_PARENTESISinstruccion : VAR type ID ASIGNACION valorarg : valor\n          | valor COMA valorprint : PRINTLN \n          | PRINTF\n          | PRINTtype : BOOL\n          | STRINGTYPE\n          | INTEGERvalor : INT\n          | DOUBLE\n          | STRING\n          | ID'
    
_lr_action_items = {'VAR':([0,],[3,]),'PRINTLN':([0,],[4,]),'PRINTF':([0,],[5,]),'PRINT':([0,],[6,]),'$end':([1,14,15,16,17,19,23,],[0,-11,-12,-13,-14,-1,-2,]),'I_PARENTESIS':([2,4,5,6,],[7,-5,-6,-7,]),'BOOL':([3,],[9,]),'STRINGTYPE':([3,],[10,]),'INTEGER':([3,],[11,]),'INT':([7,20,21,],[14,14,14,]),'DOUBLE':([7,20,21,],[15,15,15,]),'STRING':([7,20,21,],[16,16,16,]),'ID':([7,8,9,10,11,20,21,],[17,18,-8,-9,-10,17,17,]),'D_PARENTESIS':([12,13,14,15,16,17,22,],[19,-3,-11,-12,-13,-14,-4,]),'COMA':([13,14,15,16,17,],[20,-11,-12,-13,-14,]),'ASIGNACION':([18,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instruccion':([0,],[1,]),'print':([0,],[2,]),'type':([3,],[8,]),'arg':([7,],[12,]),'valor':([7,20,21,],[13,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instruccion","S'",1,None,None,None),
  ('instruccion -> print I_PARENTESIS arg D_PARENTESIS','instruccion',4,'p_impresion','sintactico.py',14),
  ('instruccion -> VAR type ID ASIGNACION valor','instruccion',5,'p_asignacion','sintactico.py',18),
  ('arg -> valor','arg',1,'p_argumento','sintactico.py',28),
  ('arg -> valor COMA valor','arg',3,'p_argumento','sintactico.py',29),
  ('print -> PRINTLN','print',1,'p_print_options','sintactico.py',33),
  ('print -> PRINTF','print',1,'p_print_options','sintactico.py',34),
  ('print -> PRINT','print',1,'p_print_options','sintactico.py',35),
  ('type -> BOOL','type',1,'p_tipo','sintactico.py',39),
  ('type -> STRINGTYPE','type',1,'p_tipo','sintactico.py',40),
  ('type -> INTEGER','type',1,'p_tipo','sintactico.py',41),
  ('valor -> INT','valor',1,'p_valores','sintactico.py',44),
  ('valor -> DOUBLE','valor',1,'p_valores','sintactico.py',45),
  ('valor -> STRING','valor',1,'p_valores','sintactico.py',46),
  ('valor -> ID','valor',1,'p_valores','sintactico.py',47),
]
