2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:45 -- h: o
2022-11-29 22:50 -- holaaaa
2022-11-29 23:18 -- holaaaa: None
2022-11-29 23:18 -- holaaaa: None
2022-11-29 22:52 -- p: 1
2022-11-29 22:53 -- p: 1
2022-11-29 23:00 -- x:  
2022-11-29 23:00 -- x:  
2022-11-29 23:00 -- x:  
2022-11-29 23:00 -- x:  
2022-11-29 23:03 -- y: +
2022-11-29 23:03 -- y: +
2022-11-29 23:03 -- z: -
2022-11-29 23:43 -- var a = 1 + 2: None
2022-11-30 20:04 -- hola: None
2022-11-30 20:16 -- var a = 2
var a int = 3: None
2022-11-30 21:09 -- var a int = 2: None
2022-11-30 21:09 -- a++: None
2022-11-30 21:09 -- a++: None
2022-11-30 21:09 -- a++
a++: None
2022-11-30 21:12 -- var a int = "eso": None
2022-11-30 21:12 -- primes := [6]int{2, 3, 5, 7, 11, 13}: None
2022-11-30 21:12 -- primes := [6]int{2, 3, 5, 7, 11, 13}: None
2022-11-30 21:13 -- primes := [6]int{1, 3, 5, 7, 11, 13}: None
2022-11-30 21:18 -- primes := "eso" + "weso": None
2022-11-30 21:28 -- var a string = "hola": None
2022-11-30 21:29 -- var a int = 2: None
2022-11-30 23:31 -- if 3 < 2 { var a = 2 }: None
2022-11-30 23:31 -- if 3 < 2 { return a }: None
2022-11-30 23:31 -- if 3 < 2 { return true }: None
2022-11-30 23:32 -- if true{ 
	return true 
}: None
2022-12-01 09:42 -- var a int = 1 + 2: None
2022-12-01 09:42 -- var a int = 1 + 2: None
2022-12-01 09:43 -- var a string = "eso" : None
2022-12-01 09:46 -- var a string = llamadaFunc(): None
2022-12-01 09:46 -- var a int = llamadaFunc(): None
2022-12-01 09:46 -- var a = llamadaFunc(): None
2022-12-01 09:46 -- var a bool = llamadaFunc(): None
2022-12-01 09:46 -- var a bool = (1+2-a) > (2+3-r): None
2022-12-01 09:46 -- var a bool = (1+2-a) >= (2+3-r): None
2022-12-01 09:47 -- var a bool = ((1+2-a) >= (2+3-r)) && ((1+2-a) >= (2+3-r)): None
2022-12-01 09:47 -- var a bool = ((1+2-a) >= (2+3-r)) && ((1+2-a) <= (2+3-r)): None
2022-12-01 09:47 -- var a bool = ((1+2-a) >= (2+3-r)) || ((1+2-a) <= (2+3-r)): None
2022-12-01 09:56 -- var a bool = !a: None
2022-12-01 09:57 -- var a bool = !( ((a+b) > 4 ) && b )  : None
2022-12-01 10:14 -- 
var p Person // Declarando una variable del struct Person
fmt.Println(p)

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)
: None
2022-12-01 10:15 -- 
	var p Person // Declarando una variable del struct Person
fmt.Println(p)

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)
: None
2022-12-01 10:20 -- var p Person // Declarando una variable del struct Person
fmt.Println(p)
: None
2022-12-01 10:20 -- var p Person // Declarando una variable del struct Person
fmt.Println(p)

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1): None
2022-12-01 10:20 -- var p Person // Declarando una variable del struct Person
fmt.Println(p)

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1): None
2022-12-01 10:31 -- 

if(p2 > 45){
	fmt.Println("FirstName: ", p2)
	fmt.Println("LastName: ", p2)
	fmt.Println("Age: ", p2)
}

: None
2022-12-01 10:35 -- 
p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)

p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}: None
2022-12-01 10:35 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:35 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:35 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:35 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:35 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:37 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:39 -- // Diego Arteaga

type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main() {

	// Declarando una variable de tipo `struct`
	var p Person // Declarando una variable del struct Person
	fmt.Println(p)

	// Declarando e inicializando una instancia del struct con struct literal
	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	// Nombrando los campos mientras se inicializa la variable
	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}
}: None
2022-12-01 10:40 -- 
p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)

p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}: None
2022-12-01 10:40 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)

p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

p1 := Person{"Enner", "Valencia", 33}
fmt.Println("Person1: ", p1)

p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}

}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}

}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

if(p2.Age > 45){
	fmt.Println("FirstName: ", p2.FirstName)
	fmt.Println("LastName: ", p2.LastName)
	fmt.Println("Age: ", p2.Age)
}

fmt.Println("Person3: ", p3)
fmt.Println("Person3: ", p3)

p1 := Point{3.4, 5.2}
p2 := Point{3.4, 5.2}

if p1 == p2 {
	fmt.Println("Point p1 and p2 are equal.")
} else {
	fmt.Println("Point p1 and p2 are not equal.")
}

}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}

}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}

}: None
2022-12-01 10:41 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}

}: None
2022-12-01 10:42 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}

}: None
2022-12-01 10:42 -- type Person struct {
	FirstName string
	LastName  string
	Age       int
}

type Point struct {
	X float64
	Y float64
}

func main(){

	p1 := Person{"Enner", "Valencia", 33}
	fmt.Println("Person1: ", p1)

	p2 := Person{ FirstName:"John", LastName:"Wick", Age: 45}

	if(p2.Age > 45){
		fmt.Println("FirstName: ", p2.FirstName)
		fmt.Println("LastName: ", p2.LastName)
		fmt.Println("Age: ", p2.Age)
	}

	fmt.Println("Person3: ", p3)
	fmt.Println("Person3: ", p3)

	p1 := Point{3.4, 5.2}
	p2 := Point{3.4, 5.2}

	if p1 == p2 {
		fmt.Println("Point p1 and p2 are equal.")
	} else {
		fmt.Println("Point p1 and p2 are not equal.")
	}

}: None
